[{"/Users/jake/workspace/token-builder/src/index.js":"1","/Users/jake/workspace/token-builder/src/reportWebVitals.js":"2","/Users/jake/workspace/token-builder/src/App.js":"3","/Users/jake/workspace/token-builder/src/Components/BuildForm.jsx":"4","/Users/jake/workspace/token-builder/src/Components/Dashboard.jsx":"5","/Users/jake/workspace/token-builder/src/Components/DashboardCard.js":"6","/Users/jake/workspace/token-builder/src/Components/TokenEntry.js":"7","/Users/jake/workspace/token-builder/src/Components/abi.js":"8"},{"size":535,"mtime":1649601027933,"results":"9","hashOfConfig":"10"},{"size":362,"mtime":1647005151141,"results":"11","hashOfConfig":"10"},{"size":6719,"mtime":1650657208565,"results":"12","hashOfConfig":"10"},{"size":2025,"mtime":1650649171206,"results":"13","hashOfConfig":"10"},{"size":11254,"mtime":1649605207988,"results":"14","hashOfConfig":"10"},{"size":1740,"mtime":1649605190193,"results":"15","hashOfConfig":"10"},{"size":786,"mtime":1649605233273,"results":"16","hashOfConfig":"10"},{"size":706,"mtime":1649528657783,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"hgoqof",{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"28"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"21"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"21"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"/Users/jake/workspace/token-builder/src/index.js",[],[],[],"/Users/jake/workspace/token-builder/src/reportWebVitals.js",[],[],"/Users/jake/workspace/token-builder/src/App.js",["46","47","48"],[],"import logo from './logo.svg';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport { Routes, Route, Link, useNavigate } from 'react-router-dom';\nimport BuildForm from './Components/BuildForm.jsx';\nimport DashboardCard from './Components/DashboardCard'\nimport { ethers } from 'ethers';\nimport { useEffect, useState } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport axios from 'axios';\n\nfunction App() {\n  const [web3, setWeb3] = useState({\n  });\n\n  const [tokenAddress, setTokenAddress] = useState('');\n  const [inProgress, toggleInProgress] = useState(false);\n\n  useEffect(async () => {\n    const provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\n    await provider.send(\"eth_requestAccounts\", []);\n    const signer = provider.getSigner();\n    setWeb3({\n      provider: provider,\n      signer: signer\n    });\n  }, []);\n\n  const handleSubmit = async (name, symbol, supply, decimals) => {\n    if (!inProgress) {\n      try {\n        toggleInProgress(true);\n\n        const address = await web3.signer.getAddress();\n        \n        const res = await axios.post(\"https://jake-rice-token-builder.herokuapp.com/\"/*\"http://localhost:3001/\"*/, {\n          address: address,\n          name: name\n        });\n        \n        const contract = await deploy(res.data.abi, res.data.bytecode, name, symbol, supply, decimals);\n        const tx = contract.deployTransaction;\n        console.log(contract.address);\n        setTokenAddress(contract.address);\n        const rx = await tx.wait();\n        console.log(rx);\n        setWeb3({\n          ...web3,\n          contract: contract\n        });\n        toggleInProgress(false);\n        navigate(\"/dashboard\");\n      } catch (e) {\n        toggleInProgress(false);\n        setTimeout(() => alert(\"Error: token not created\\n\"+ e.message), 100);\n      }\n    }\n  }\n\n  const deploy = async (abi, bytecode, ...args) => {\n    const factory = new ethers.ContractFactory(abi, bytecode, web3.signer);\n    const contract = await factory.deploy(...args);\n    return contract;\n  }\n\n  const navigate = useNavigate();\n\n  const handleReset = () => {\n    setTokenAddress('');\n  }\n\n  const handleUpdateContract = (contract) => {\n    setWeb3({...web3, contract: contract});\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Token Builder</h1>\n      <h2>Build your own ERC20 token on the Ethereum (Rinkeby) blockchain!</h2>\n      <Link to=\"/build\"><Button variant=\"primary\">Create A Token</Button></Link>\n      <Link to=\"/dashboard\"><Button variant=\"secondary\">Token Dashboard</Button></Link>\n      <div className=\"card-container\">\n        <Routes>\n          <Route path=\"/\" element={<></>}/>\n          <Route path=\"/\" element={<></>}/>\n          <Route path=\"/build\" element={<BuildForm onSubmit={handleSubmit} inProgress={inProgress}/>}/>\n          <Route path=\"/dashboard\" element={web3.signer ? <DashboardCard web3={web3} tokenAddress={tokenAddress} setTokenAddress={setTokenAddress} updateContract={handleUpdateContract} reset={handleReset}/> : <></>}/>\n        </Routes>\n        <div className=\"instructions-container card card-info\">\n          <h3 className=\"instructions-section-header\">Creating A Token</h3>\n          <ol className=\"instructions-list\">\n            <li>Make sure you have Metamask installed on your browser.</li>\n            <li>Set Metamask to the Rinkeby Ethereum Test Network.</li>\n            <li>Get some test ETH from a faucet like <a href=\"http://faucets.chain.link/rinkeby\" target=\"_blank\">Chainlink</a></li>\n            <li>Connect your Metamask account to this website.</li>\n            <li>Click the \"Create A Token\" button.</li>\n            <li>Enter the Name, Symbol and Initial Supply of your token.</li>\n            <li>Enter the number of decimal places your token can be divided into.</li>\n            <li>Click the \"Create Token\" button at the bottom of the form.</li>\n            <li>Approve the transaction in Metamask to pay the fee and gas for token deployment.</li>\n          </ol>\n          <h3 className=\"instructions-section-header\">Using The Token Dashboard</h3>\n          <ol className=\"instructions-list\">\n            <li>Make sure you have Metamask installed on your browser.</li>\n            <li>Click the \"Token Dashboard\" button above.</li>\n            <li>Enter the contract address for the ERC20 token you want to use.</li>\n            <li>Click the \"Get Token\" button.</li>\n            <li>If the address points to a valid ERC20 token, the token details will appear.</li>\n          </ol>\n          <h4 className=\"instructions-function-header\">Transfer Tokens</h4>\n          <ol className=\"instructions-list\">\n            <li>Enter Recipient (the address you are sending your tokens to).</li>\n            <li>Enter Amount (the number of tokens you are sending to the Recipient).</li>\n            <li>Click the \"Transfer\" button.</li>\n            <li>Approve the transaction in Metamask and pay the necessary gas.</li>\n            <li>Your balance shown in the dashboard will update once the transaction is added to the blockchain.</li>\n          </ol>\n          <h4 className=\"instructions-function-header\">Set Token Allowance</h4>\n          <ol className=\"instructions-list\">\n            <li>This function allows another address to spend your tokens (or transfer the tokens to their own address).</li>\n            <li>Enter Spender (the address you are authorizing to spend your tokens).</li>\n            <li>Enter Amount (the number of tokens you are authorizing the Spender to spend).</li>\n            <li>Click the \"Set Allowance\" button.</li>\n            <li>Approve the transaction in Metamask and pay the necessary gas.</li>\n            <li>Once the transaction is added to the blockchain, the Spender address will have access to the approved Amount of your tokens.</li>\n          </ol>\n          <h4 className=\"instructions-function-header\">Claim Allowance</h4>\n          <ol className=\"instructions-list\">\n            <li>This function transfers tokens to your account from an address that has approved an allowance to you.</li>\n            <li>Enter Owner (the address you are claiming tokens from).</li>\n            <li>If the address is valid, the allowance the Owner has approved for your address will be shown.</li>\n            <li>Enter Amount (the number of tokens you are claiming).</li>\n            <li>Click the \"Claim Allowance\" button.</li>\n            <li>Approve the transaction in Metamask and pay the necessary gas.</li>\n            <li>Once the transaction is added to the blockchain, the tokens will be in your account, and the allowance from the Owner will be reduced</li>\n          </ol>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/jake/workspace/token-builder/src/Components/BuildForm.jsx",[],[],"/Users/jake/workspace/token-builder/src/Components/Dashboard.jsx",["49","50","51","52","53","54","55","56"],[],"import React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers'\nimport './dashboard.css';\nimport { Link } from 'react-router-dom';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button'\nimport abi from './abi'\n\nconst rxAddress = /^0x[a-fA-F0-9]{40}$/;\n\nconst Dashboard = (props) => {\n    const [transferRecipient, setTransferRecipient] = useState('');\n    const [transferAmount, setTransferAmount] = useState('');\n\n    const [allowanceSpender, setAllowanceSpender] = useState('');\n    const [allowanceAmount, setAllowanceAmount] = useState('');\n\n    const [allowanceAvailable, setAllowanceAvailable] = useState('');\n    const [validAllowance, setValidAllowance] = useState(false);\n\n    const [claimOwner, setClaimOwner] = useState('');\n    const [claimAmount, setClaimAmount] = useState('');\n    const [sendAllowance, setSendAllowance] = useState(false);\n    const [sendAddress, setSendAddress] = useState('');\n\n    useEffect(async () => {\n        if (rxAddress.test(claimOwner)) {\n            const decimals = await props.web3.contract.decimals();\n            try {\n                const _allowance = await props.web3.contract.allowance(claimOwner, await props.web3.signer.getAddress());\n                setAllowanceAvailable(formatBalance(_allowance.toString(), decimals));\n                setValidAllowance(true);\n            } catch(err) {\n                console.error(err);\n            }\n        }\n        else setValidAllowance(false);\n    }, [claimOwner]);\n\n    useEffect(() => {\n        props.web3.contract.removeAllListeners();\n        return (()=>{\n            props.web3.contract.removeAllListeners();\n        });\n    }, []);\n\n    useEffect(() => {\n        const run = async () => {\n            if (props.tokenData.accountAddress) {\n                //Change allowance display if visible\n                if (rxAddress.test(claimOwner)) {\n                    const dec = await props.web3.contract.decimals();\n                    const _allowance = await props.web3.contract.allowance(claimOwner, props.tokenData.accountAddress);\n                    setAllowanceAvailable(formatBalance(_allowance.toString(), dec));\n                }\n                // transfer()\n                const filter = props.web3.contract.filters.Transfer(props.tokenData.accountAddress);\n                props.web3.contract.on(filter, async (from, to, amount, event) => {\n                    const bal = await props.web3.contract.balanceOf(props.tokenData.accountAddress);\n                    props.updateTokenData({...props.tokenData, balance: bal.toString()});\n                });\n                // transferFrom()\n                const filter2 = props.web3.contract.filters.Transfer(null, props.tokenData.accountAddress);\n                props.web3.contract.on(filter2, async (from, to, amount, event) => {\n                    const bal = await props.web3.contract.balanceOf(props.tokenData.accountAddress);\n                    const dec = await props.web3.contract.decimals();\n                    props.updateTokenData({...props.tokenData, balance: bal.toString()});\n                    const _allowance = await props.web3.contract.allowance(from, to);\n                    setAllowanceAvailable(formatBalance(_allowance.toString(), dec));\n                });\n                // approve()\n                const filter3 = props.web3.contract.filters.Approval(null, props.tokenData.accountAddress);\n                props.web3.contract.on(filter3, async (from, to, amount, event) => {\n                    //TODO: run only if approving address == claimOwner\n                    if (from === claimOwner) {\n                        const dec = await props.web3.contract.decimals();\n                        const _allowance = await props.web3.contract.allowance(from, to);\n                        setAllowanceAvailable(formatBalance(_allowance.toString(), dec));\n                    }\n                });\n            }\n        }\n        run();\n        return (()=>{\n            props.web3.contract.removeAllListeners();\n        });\n    }, [props.tokenData.accountAddress]);\n\n    useEffect(async () => {\n        const erc20 = new ethers.Contract(props.tokenAddress, abi, props.web3.signer)\n        const pUser = props.web3.signer.getAddress();\n        const pName = erc20.name();\n        const pSymbol = erc20.symbol();\n        const pDecimals = erc20.decimals();\n        const [user, name, symbol, decimals] = await Promise.all([pUser, pName, pSymbol, pDecimals]);\n        const balance = await erc20.balanceOf(user);\n        props.updateTokenData({\n            accountAddress: user,\n            balance: balance.toString(),\n            name: name,\n            symbol: symbol,\n            decimals: decimals\n        });\n        props.web3.provider.provider.on(\"accountsChanged\", async () => {\n            const signer = props.web3.provider.getSigner();\n            const pUser = signer.getAddress();\n            const pName = props.web3.contract.name();\n            const pSymbol = props.web3.contract.symbol();\n            const pDecimals = props.web3.contract.decimals();\n            const [user, name, symbol, decimals] = await Promise.all([pUser, pName, pSymbol, pDecimals]);\n            const balance = await props.web3.contract.balanceOf(user);\n            props.updateTokenData({\n                accountAddress: user,\n                balance: balance.toString(),\n                name: name,\n                symbol: symbol,\n                decimals: decimals\n            });\n        });\n    }, []);\n\n    const transferTokens = async (recipient, amount) => {\n        try {\n            const decimals = await props.web3.contract.decimals();\n            await props.web3.contract.transfer(recipient, parseAmount(amount, decimals));\n        } catch (e) { \n            console.error(e);\n            alert('Error: Transfer failed.');\n        }\n    }\n\n    const setTokenAllowance = async (recipient, amount) => {\n        try {\n            const sender = await props.web3.signer.getAddress();\n            const balance = await props.web3.contract.balanceOf(sender);\n            const decimals = await props.web3.contract.decimals();\n            if (balance >= formatBalance(amount, decimals)) {\n                await props.web3.contract.approve(recipient, parseAmount(amount, decimals));\n            }\n            else alert(\"Error: Insufficient balance.\")\n        } catch (e) { \n            console.error(e);\n            alert('Error: Allowance failed.');\n        }\n    }\n\n    const transferAllowance = async (owner, recipient, amount) => {\n        try {\n            const balance = await props.web3.contract.balanceOf(owner);\n            const decimals = await props.web3.contract.decimals();\n            if (balance >= formatBalance(amount, decimals) ) {\n                await props.web3.contract.transferFrom(owner, recipient, parseAmount(amount, decimals));\n            }\n        } catch (e) { \n            console.error(e);\n            alert('Error: Transfer failed.');\n        }\n    }\n\n    const formatBalance = (balance, dec) => {\n        if (dec === 0) return balance;\n        let bal = balance;\n        while (bal.length <= dec) bal = '0'+bal;\n        bal = bal.slice(0,0-dec)+'.'+bal.slice(0-dec);\n        while (bal[bal.length-1] === '0') bal = bal.slice(0,-1);\n        if (bal[bal.length-1] === '.') bal = bal.slice(0,-1);\n        return bal;\n    }\n\n    const parseAmount = (amt, dec) => {\n        let amount = amt;\n        if (amount.indexOf('.') < 0) {\n            for (let i=0; i<dec; i++) {\n                amount=amount+'0';\n            }\n            return amount;\n        }\n        while (amount.length-amount.indexOf('.') <= dec) amount=amount+'0';\n        if (amount.length-amount.indexOf('.') > dec+1) amount = amount.slice(0,amount.indexOf('.')+dec);\n        return amount.slice(0,amount.indexOf('.'))+amount.slice(amount.indexOf('.')+1);\n    }\n\n    return (\n        <Form>\n            <h3>Token Dashboard</h3>\n            <div className=\"form-row\"><label>Token Address: {props.tokenAddress}</label></div>\n            <div className=\"form-row\"><label>Token Name: {props.tokenData.name}</label></div>\n            <div className=\"form-row\"><label>Token Symbol: {props.tokenData.symbol}</label></div>\n            <div className=\"form-row\"><label>Account Address: {props.tokenData.accountAddress}</label></div>\n            <div className=\"form-row\"><label>Token Balance: {formatBalance(props.tokenData.balance.toString(), props.tokenData.decimals)} {props.tokenData.symbol}</label></div>\n            <hr/>\n            <h3>Transfer Tokens</h3>\n            <div className=\"form-row\">\n                <label>Recipient</label>\n                <input className=\"text-input\" value={transferRecipient} onChange={(event)=>setTransferRecipient(event.target.value)}/><br/>\n                <label>Amount</label>\n                <input type=\"number\" value={transferAmount} onChange={(event)=>setTransferAmount(event.target.value)}/>\n                <Button size=\"sm\" variant=\"danger\" onClick={() => transferTokens(transferRecipient, transferAmount)}>Transfer</Button>\n            </div>\n            <hr/>\n            <h3>Set Token Allowance</h3>\n            <div className=\"form-row\">\n                <label>Spender</label>\n                <input className=\"text-input\" value={allowanceSpender} onChange={(event)=>setAllowanceSpender(event.target.value)}/><br/>\n                <label>Amount</label>\n                <input type=\"number\" value={allowanceAmount} onChange={(event)=>setAllowanceAmount(event.target.value)}/>\n                <Button size=\"sm\" variant=\"danger\" onClick={() => setTokenAllowance(allowanceSpender, allowanceAmount)}>Set Allowance</Button>\n            </div>\n            <hr/>\n            <h3>Claim Allowance</h3>\n            <div className=\"form-row\">\n                <label>Owner</label>\n                <input className=\"text-input\" value={claimOwner} onChange={(event)=>setClaimOwner(event.target.value)}/><br/>\n                {validAllowance && <div><label>Available Allowance: {allowanceAvailable} {props.tokenData.symbol}</label><br/></div>}\n                <label>Amount</label>\n                <input type=\"number\" value={claimAmount} onChange={(event)=>setClaimAmount(event.target.value)}/>\n                <Button size=\"sm\" variant=\"danger\" onClick={() => transferAllowance(claimOwner, (sendAllowance ? sendAddress : props.tokenData.accountAddress), claimAmount)}>{sendAllowance ? \"Send Allowance\" : \"Claim Allowance\"}</Button>\n                {/*<label><input type=\"checkbox\" checked={sendAllowance} onChange={()=>setSendAllowance(!sendAllowance)}/> Send to another address</label>*/}\n                {/*sendAllowance &&\n                    <div>\n                        <label>Destination address</label>\n                        <input className=\"text-input\" value={sendAddress} onChange={(event)=>setSendAddress(event.target.value)}/>\n                    </div>*/}\n            </div>\n            <div className=\"form-row btn-row\">\n                <Link to=\"/token-builder/dashboard\">\n                    <Button variant=\"secondary\" onClick={props.reset}>Use a Different Token</Button>\n                </Link>\n            </div>\n        </Form>\n    )\n}\nexport default Dashboard;","/Users/jake/workspace/token-builder/src/Components/DashboardCard.js",["57"],[],"import React, { useState, useEffect } from 'react'\nimport { ethers } from 'ethers';\nimport Card from 'react-bootstrap/Card';\nimport TokenEntry from './TokenEntry';\nimport Dashboard from './Dashboard'\nimport abi from './abi'\n\nconst DashboardCard = (props) => {\n    const [tokenData, setTokenData] = useState({\n        accountAddress: '',\n        balance: '',\n        name: '',\n        symbol: '',\n        decimals: ''\n    });\n\n    const handleSubmit = async (addr) => {\n        try {\n            const erc20 = new ethers.Contract(addr, abi, props.web3.signer)\n            props.updateContract(erc20);\n            const pUser = props.web3.signer.getAddress();\n            const pName = erc20.name();\n            const pSymbol = erc20.symbol();\n            const pDecimals = erc20.decimals();\n            const [user, name, symbol, decimals] = await Promise.all([pUser, pName, pSymbol, pDecimals]);\n            const balance = await erc20.balanceOf(user);\n            setTokenData({\n                accountAddress: user,\n                balance: balance.toString(),\n                name: name,\n                symbol: symbol,\n                decimals: decimals\n            });\n            props.setTokenAddress(addr);\n        } catch (e) { \n            console.error(e);\n            alert('Error: Token address invalid.');\n        }\n    }\n\n    const updateTokenData = (data) => {\n        setTokenData(data);\n    }\n\n    return (\n        <Card className=\"card card-app\">\n            {(props.tokenAddress==='') ? <TokenEntry submit={handleSubmit}/> : <Dashboard web3={props.web3} tokenAddress={props.tokenAddress} tokenData={tokenData} updateTokenData={updateTokenData} reset={props.reset}/>}\n        </Card>\n    )\n}\n\nexport default DashboardCard","/Users/jake/workspace/token-builder/src/Components/TokenEntry.js",[],[],"/Users/jake/workspace/token-builder/src/Components/abi.js",[],[],{"ruleId":"58","severity":1,"message":"59","line":1,"column":8,"nodeType":"60","messageId":"61","endLine":1,"endColumn":12},{"ruleId":"62","severity":1,"message":"63","line":19,"column":13,"nodeType":"64","endLine":27,"endColumn":4},{"ruleId":"65","severity":1,"message":"66","line":94,"column":54,"nodeType":"67","messageId":"68","endLine":94,"endColumn":114,"fix":"69"},{"ruleId":"58","severity":1,"message":"70","line":23,"column":27,"nodeType":"60","messageId":"61","endLine":23,"endColumn":43},{"ruleId":"58","severity":1,"message":"71","line":24,"column":25,"nodeType":"60","messageId":"61","endLine":24,"endColumn":39},{"ruleId":"62","severity":1,"message":"63","line":26,"column":15,"nodeType":"64","endLine":38,"endColumn":6},{"ruleId":"62","severity":1,"message":"72","line":38,"column":8,"nodeType":"73","endLine":38,"endColumn":20,"suggestions":"74"},{"ruleId":"62","severity":1,"message":"75","line":45,"column":8,"nodeType":"73","endLine":45,"endColumn":10,"suggestions":"76"},{"ruleId":"62","severity":1,"message":"77","line":87,"column":8,"nodeType":"73","endLine":87,"endColumn":40,"suggestions":"78"},{"ruleId":"62","severity":1,"message":"63","line":89,"column":15,"nodeType":"64","endLine":120,"endColumn":6},{"ruleId":"62","severity":1,"message":"79","line":120,"column":8,"nodeType":"73","endLine":120,"endColumn":10,"suggestions":"80"},{"ruleId":"58","severity":1,"message":"81","line":1,"column":27,"nodeType":"60","messageId":"61","endLine":1,"endColumn":36},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","JSXOpeningElement","noTargetBlankWithoutNoreferrer",{"range":"82","text":"83"},"'setSendAllowance' is assigned a value but never used.","'setSendAddress' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'props.web3.contract' and 'props.web3.signer'. Either include them or remove the dependency array.","ArrayExpression",["84"],"React Hook useEffect has a missing dependency: 'props.web3.contract'. Either include it or remove the dependency array.",["85"],"React Hook useEffect has missing dependencies: 'claimOwner' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["86"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["87"],"'useEffect' is defined but never used.",[3497,3497]," rel=\"noreferrer\"",{"desc":"88","fix":"89"},{"desc":"90","fix":"91"},{"desc":"92","fix":"93"},{"desc":"94","fix":"95"},"Update the dependencies array to be: [claimOwner, props.web3.contract, props.web3.signer]",{"range":"96","text":"97"},"Update the dependencies array to be: [props.web3.contract]",{"range":"98","text":"99"},"Update the dependencies array to be: [claimOwner, props, props.tokenData.accountAddress]",{"range":"100","text":"101"},"Update the dependencies array to be: [props]",{"range":"102","text":"103"},[1500,1512],"[claimOwner, props.web3.contract, props.web3.signer]",[1683,1685],"[props.web3.contract]",[4070,4102],"[claimOwner, props, props.tokenData.accountAddress]",[5531,5533],"[props]"]