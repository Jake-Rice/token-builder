{"ast":null,"code":"var _jsxFileName = \"/Users/jake/workspace/token-builder/src/Components/DashboardCard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport Card from 'react-bootstrap/Card';\nimport TokenEntry from './TokenEntry';\nimport Dashboard from './Dashboard';\nimport abi from './abi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst DashboardCard = props => {\n  _s();\n\n  const [tokenData, setTokenData] = useState({\n    accountAddress: '',\n    balance: '',\n    name: '',\n    symbol: '',\n    decimals: ''\n  });\n  useEffect(() => {\n    init();\n  }, []);\n\n  const init = async addr => {\n    const erc20 = new ethers.Contract(addr, abi, props.web3.signer);\n    const pUser = props.web3.signer.getAddress();\n    const pName = erc20.name();\n    const pSymbol = erc20.symbol();\n    const pDecimals = erc20.decimals();\n    const [user, name, symbol, decimals] = await Promise.all([pUser, pName, pSymbol, pDecimals]);\n    const balance = await erc20.balanceOf(user);\n    props.updateContract(erc20);\n    setTokenData({\n      accountAddress: user,\n      balance: balance.toString(),\n      name: name,\n      symbol: symbol,\n      decimals: decimals\n    });\n  };\n\n  const handleSubmit = async addr => {\n    try {\n      init(addr);\n      props.setTokenAddress(addr);\n    } catch (e) {\n      console.error(e);\n      alert('Error: Token address invalid.');\n    }\n  };\n\n  const updateTokenData = data => {\n    setTokenData(data);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: props.tokenAddress === '' ? /*#__PURE__*/_jsxDEV(TokenEntry, {\n      submit: handleSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 42\n    }, this) : /*#__PURE__*/_jsxDEV(Dashboard, {\n      web3: props.web3,\n      tokenAddress: props.tokenAddress,\n      tokenData: tokenData,\n      updateTokenData: updateTokenData,\n      reset: props.reset\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 80\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n};\n\n_s(DashboardCard, \"7fURo3sgTaDCxfKwNzYII0Zx99Q=\");\n\n_c = DashboardCard;\nexport default DashboardCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"DashboardCard\");","map":{"version":3,"sources":["/Users/jake/workspace/token-builder/src/Components/DashboardCard.js"],"names":["React","useState","useEffect","ethers","Card","TokenEntry","Dashboard","abi","DashboardCard","props","tokenData","setTokenData","accountAddress","balance","name","symbol","decimals","init","addr","erc20","Contract","web3","signer","pUser","getAddress","pName","pSymbol","pDecimals","user","Promise","all","balanceOf","updateContract","toString","handleSubmit","setTokenAddress","e","console","error","alert","updateTokenData","data","tokenAddress","reset"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { ethers } from 'ethers';\nimport Card from 'react-bootstrap/Card';\nimport TokenEntry from './TokenEntry';\nimport Dashboard from './Dashboard'\nimport abi from './abi'\n\nconst DashboardCard = (props) => {\n    const [tokenData, setTokenData] = useState({\n        accountAddress: '',\n        balance: '',\n        name: '',\n        symbol: '',\n        decimals: ''\n    });\n\n    useEffect(() => {\n        init();\n    }, [])\n\n    const init = async (addr) => {\n        const erc20 = new ethers.Contract(addr, abi, props.web3.signer);\n        const pUser = props.web3.signer.getAddress();\n        const pName = erc20.name();\n        const pSymbol = erc20.symbol();\n        const pDecimals = erc20.decimals();\n        const [user, name, symbol, decimals] = await Promise.all([pUser, pName, pSymbol, pDecimals]);\n        const balance = await erc20.balanceOf(user);\n        props.updateContract(erc20);\n        setTokenData({\n            accountAddress: user,\n            balance: balance.toString(),\n            name: name,\n            symbol: symbol,\n            decimals: decimals\n        });\n    }\n\n    const handleSubmit = async (addr) => {\n        try {\n            init(addr);\n            props.setTokenAddress(addr);\n        } catch (e) { \n            console.error(e);\n            alert('Error: Token address invalid.');\n        }\n    }\n\n    const updateTokenData = (data) => {\n        setTokenData(data);\n    }\n\n    return (\n        <Card>\n            {(props.tokenAddress==='') ? <TokenEntry submit={handleSubmit}/> : <Dashboard web3={props.web3} tokenAddress={props.tokenAddress} tokenData={tokenData} updateTokenData={updateTokenData} reset={props.reset}/>}\n        </Card>\n    )\n}\n\nexport default DashboardCard"]},"metadata":{},"sourceType":"module"}