{"ast":null,"code":"'use strict';\n\nvar Runnable = require('./runnable');\n\nvar utils = require('./utils');\n\nvar errors = require('./errors');\n\nvar createInvalidArgumentTypeError = errors.createInvalidArgumentTypeError;\nvar isString = utils.isString;\nconst {\n  MOCHA_ID_PROP_NAME\n} = utils.constants;\nmodule.exports = Test;\n/**\n * Initialize a new `Test` with the given `title` and callback `fn`.\n *\n * @public\n * @class\n * @extends Runnable\n * @param {String} title - Test title (required)\n * @param {Function} [fn] - Test callback.  If omitted, the Test is considered \"pending\"\n */\n\nfunction Test(title, fn) {\n  if (!isString(title)) {\n    throw createInvalidArgumentTypeError('Test argument \"title\" should be a string. Received type \"' + typeof title + '\"', 'title', 'string');\n  }\n\n  this.type = 'test';\n  Runnable.call(this, title, fn);\n  this.reset();\n}\n/**\n * Inherit from `Runnable.prototype`.\n */\n\n\nutils.inherits(Test, Runnable);\n/**\n * Resets the state initially or for a next run.\n */\n\nTest.prototype.reset = function () {\n  Runnable.prototype.reset.call(this);\n  this.pending = !this.fn;\n  delete this.state;\n};\n/**\n * Set or get retried test\n *\n * @private\n */\n\n\nTest.prototype.retriedTest = function (n) {\n  if (!arguments.length) {\n    return this._retriedTest;\n  }\n\n  this._retriedTest = n;\n};\n/**\n * Add test to the list of tests marked `only`.\n *\n * @private\n */\n\n\nTest.prototype.markOnly = function () {\n  this.parent.appendOnlyTest(this);\n};\n\nTest.prototype.clone = function () {\n  var test = new Test(this.title, this.fn);\n  test.timeout(this.timeout());\n  test.slow(this.slow());\n  test.retries(this.retries());\n  test.currentRetry(this.currentRetry());\n  test.retriedTest(this.retriedTest() || this);\n  test.globals(this.globals());\n  test.parent = this.parent;\n  test.file = this.file;\n  test.ctx = this.ctx;\n  return test;\n};\n/**\n * Returns an minimal object suitable for transmission over IPC.\n * Functions are represented by keys beginning with `$$`.\n * @private\n * @returns {Object}\n */\n\n\nTest.prototype.serialize = function serialize() {\n  return {\n    $$currentRetry: this._currentRetry,\n    $$fullTitle: this.fullTitle(),\n    $$isPending: Boolean(this.pending),\n    $$retriedTest: this._retriedTest || null,\n    $$slow: this._slow,\n    $$titlePath: this.titlePath(),\n    body: this.body,\n    duration: this.duration,\n    err: this.err,\n    parent: {\n      $$fullTitle: this.parent.fullTitle(),\n      [MOCHA_ID_PROP_NAME]: this.parent.id\n    },\n    speed: this.speed,\n    state: this.state,\n    title: this.title,\n    type: this.type,\n    file: this.file,\n    [MOCHA_ID_PROP_NAME]: this.id\n  };\n};","map":{"version":3,"sources":["/Users/jake/workspace/token-builder/node_modules/mocha/lib/test.js"],"names":["Runnable","require","utils","errors","createInvalidArgumentTypeError","isString","MOCHA_ID_PROP_NAME","constants","module","exports","Test","title","fn","type","call","reset","inherits","prototype","pending","state","retriedTest","n","arguments","length","_retriedTest","markOnly","parent","appendOnlyTest","clone","test","timeout","slow","retries","currentRetry","globals","file","ctx","serialize","$$currentRetry","_currentRetry","$$fullTitle","fullTitle","$$isPending","Boolean","$$retriedTest","$$slow","_slow","$$titlePath","titlePath","body","duration","err","id","speed"],"mappings":"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","sourcesContent":["'use strict';\nvar Runnable = require('./runnable');\nvar utils = require('./utils');\nvar errors = require('./errors');\nvar createInvalidArgumentTypeError = errors.createInvalidArgumentTypeError;\nvar isString = utils.isString;\n\nconst {MOCHA_ID_PROP_NAME} = utils.constants;\n\nmodule.exports = Test;\n\n/**\n * Initialize a new `Test` with the given `title` and callback `fn`.\n *\n * @public\n * @class\n * @extends Runnable\n * @param {String} title - Test title (required)\n * @param {Function} [fn] - Test callback.  If omitted, the Test is considered \"pending\"\n */\nfunction Test(title, fn) {\n  if (!isString(title)) {\n    throw createInvalidArgumentTypeError(\n      'Test argument \"title\" should be a string. Received type \"' +\n        typeof title +\n        '\"',\n      'title',\n      'string'\n    );\n  }\n  this.type = 'test';\n  Runnable.call(this, title, fn);\n  this.reset();\n}\n\n/**\n * Inherit from `Runnable.prototype`.\n */\nutils.inherits(Test, Runnable);\n\n/**\n * Resets the state initially or for a next run.\n */\nTest.prototype.reset = function () {\n  Runnable.prototype.reset.call(this);\n  this.pending = !this.fn;\n  delete this.state;\n};\n\n/**\n * Set or get retried test\n *\n * @private\n */\nTest.prototype.retriedTest = function (n) {\n  if (!arguments.length) {\n    return this._retriedTest;\n  }\n  this._retriedTest = n;\n};\n\n/**\n * Add test to the list of tests marked `only`.\n *\n * @private\n */\nTest.prototype.markOnly = function () {\n  this.parent.appendOnlyTest(this);\n};\n\nTest.prototype.clone = function () {\n  var test = new Test(this.title, this.fn);\n  test.timeout(this.timeout());\n  test.slow(this.slow());\n  test.retries(this.retries());\n  test.currentRetry(this.currentRetry());\n  test.retriedTest(this.retriedTest() || this);\n  test.globals(this.globals());\n  test.parent = this.parent;\n  test.file = this.file;\n  test.ctx = this.ctx;\n  return test;\n};\n\n/**\n * Returns an minimal object suitable for transmission over IPC.\n * Functions are represented by keys beginning with `$$`.\n * @private\n * @returns {Object}\n */\nTest.prototype.serialize = function serialize() {\n  return {\n    $$currentRetry: this._currentRetry,\n    $$fullTitle: this.fullTitle(),\n    $$isPending: Boolean(this.pending),\n    $$retriedTest: this._retriedTest || null,\n    $$slow: this._slow,\n    $$titlePath: this.titlePath(),\n    body: this.body,\n    duration: this.duration,\n    err: this.err,\n    parent: {\n      $$fullTitle: this.parent.fullTitle(),\n      [MOCHA_ID_PROP_NAME]: this.parent.id\n    },\n    speed: this.speed,\n    state: this.state,\n    title: this.title,\n    type: this.type,\n    file: this.file,\n    [MOCHA_ID_PROP_NAME]: this.id\n  };\n};\n"]},"metadata":{},"sourceType":"script"}