{"ast":null,"code":"var _jsxFileName = \"/Users/jake/workspace/token-builder/src/App.js\",\n    _s = $RefreshSig$();\n\nimport logo from './logo.svg';\nimport './App.css';\nimport BuildForm from './Components/BuildForm.jsx';\nimport Dashboard from './Components/Dashboard.jsx';\nimport { ethers } from 'ethers';\nimport { useState } from 'react';\nimport CustomERC20Builder from './artifacts/src/contracts/CustomERC20Builder.sol/CustomERC20Builder.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst contractAddress = '0x68D141E76b8CFE92A2752e0cD6BF143d48f5Ab69'; //Rinkeby\n\nfunction App() {\n  _s();\n\n  const [tokenAddress, setTokenAddress] = useState('');\n\n  const build = async (name, symbol, supply, decimals, mintable) => {\n    const provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\n    await provider.send(\"eth_requestAccounts\", []);\n    const signer = provider.getSigner();\n    const contract = new ethers.Contract(contractAddress, CustomERC20Builder.abi, signer);\n    const owner = await signer.getAddress();\n    console.log(contract);\n    const eventFilter = contract.filters.TokenDeployment(owner, null);\n    contract.on(eventFilter, (ownerAddress, tokenAddr, event) => {\n      setTokenAddress(tokenAddr);\n    });\n    await contract.buildERC20(owner, supply, name, symbol, decimals, mintable, {\n      \"value\": ethers.utils.parseEther(\"0.001\")\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Token Builder\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Build your own ERC20 token on the Ethereum blockchain!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), !tokenAddress && /*#__PURE__*/_jsxDEV(BuildForm, {\n      onSubmit: build\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 25\n    }, this), tokenAddress && /*#__PURE__*/_jsxDEV(Dashboard, {\n      tokenAddress: tokenAddress\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"t6suzVxPUkDVgecpA2Lv54nf8Oc=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/jake/workspace/token-builder/src/App.js"],"names":["logo","BuildForm","Dashboard","ethers","useState","CustomERC20Builder","contractAddress","App","tokenAddress","setTokenAddress","build","name","symbol","supply","decimals","mintable","provider","providers","Web3Provider","window","ethereum","send","signer","getSigner","contract","Contract","abi","owner","getAddress","console","log","eventFilter","filters","TokenDeployment","on","ownerAddress","tokenAddr","event","buildERC20","utils","parseEther"],"mappings":";;;AAAA,OAAOA,IAAP,MAAiB,YAAjB;AACA,OAAO,WAAP;AACA,OAAOC,SAAP,MAAsB,4BAAtB;AACA,OAAOC,SAAP,MAAsB,4BAAtB;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,SAASC,QAAT,QAAyB,OAAzB;AAEA,OAAOC,kBAAP,MAA+B,0EAA/B;;AACA,MAAMC,eAAe,GAAG,4CAAxB,C,CAAsE;;AAEtE,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCL,QAAQ,CAAC,EAAD,CAAhD;;AAEA,QAAMM,KAAK,GAAG,OAAOC,IAAP,EAAaC,MAAb,EAAqBC,MAArB,EAA6BC,QAA7B,EAAuCC,QAAvC,KAAoD;AAChE,UAAMC,QAAQ,GAAG,IAAIb,MAAM,CAACc,SAAP,CAAiBC,YAArB,CAAkCC,MAAM,CAACC,QAAzC,EAAmD,KAAnD,CAAjB;AACA,UAAMJ,QAAQ,CAACK,IAAT,CAAc,qBAAd,EAAqC,EAArC,CAAN;AACA,UAAMC,MAAM,GAAGN,QAAQ,CAACO,SAAT,EAAf;AACA,UAAMC,QAAQ,GAAG,IAAIrB,MAAM,CAACsB,QAAX,CAAoBnB,eAApB,EAAqCD,kBAAkB,CAACqB,GAAxD,EAA6DJ,MAA7D,CAAjB;AACA,UAAMK,KAAK,GAAG,MAAML,MAAM,CAACM,UAAP,EAApB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYN,QAAZ;AACA,UAAMO,WAAW,GAAGP,QAAQ,CAACQ,OAAT,CAAiBC,eAAjB,CAAiCN,KAAjC,EAAwC,IAAxC,CAApB;AACAH,IAAAA,QAAQ,CAACU,EAAT,CAAYH,WAAZ,EAAyB,CAACI,YAAD,EAAeC,SAAf,EAA0BC,KAA1B,KAAoC;AAC3D5B,MAAAA,eAAe,CAAC2B,SAAD,CAAf;AACD,KAFD;AAGA,UAAMZ,QAAQ,CAACc,UAAT,CAAoBX,KAApB,EAA2Bd,MAA3B,EAAmCF,IAAnC,EAAyCC,MAAzC,EAAiDE,QAAjD,EAA2DC,QAA3D,EAAqE;AAAC,eAASZ,MAAM,CAACoC,KAAP,CAAaC,UAAb,CAAwB,OAAxB;AAAV,KAArE,CAAN;AACD,GAZD;;AAcA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,EAGG,CAAChC,YAAD,iBAAiB,QAAC,SAAD;AAAW,MAAA,QAAQ,EAAEE;AAArB;AAAA;AAAA;AAAA;AAAA,YAHpB,EAIGF,YAAY,iBAAI,QAAC,SAAD;AAAW,MAAA,YAAY,EAAEA;AAAzB;AAAA;AAAA;AAAA;AAAA,YAJnB;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;;GAzBQD,G;;KAAAA,G;AA2BT,eAAeA,GAAf","sourcesContent":["import logo from './logo.svg';\nimport './App.css';\nimport BuildForm from './Components/BuildForm.jsx';\nimport Dashboard from './Components/Dashboard.jsx';\nimport { ethers } from 'ethers';\nimport { useState } from 'react';\n\nimport CustomERC20Builder from './artifacts/src/contracts/CustomERC20Builder.sol/CustomERC20Builder.json';\nconst contractAddress = '0x68D141E76b8CFE92A2752e0cD6BF143d48f5Ab69'; //Rinkeby\n\nfunction App() {\n  const [tokenAddress, setTokenAddress] = useState('');\n\n  const build = async (name, symbol, supply, decimals, mintable) => {\n    const provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\n    await provider.send(\"eth_requestAccounts\", []);\n    const signer = provider.getSigner();\n    const contract = new ethers.Contract(contractAddress, CustomERC20Builder.abi, signer);\n    const owner = await signer.getAddress();\n    console.log(contract);\n    const eventFilter = contract.filters.TokenDeployment(owner, null);\n    contract.on(eventFilter, (ownerAddress, tokenAddr, event) => {\n      setTokenAddress(tokenAddr);\n    })\n    await contract.buildERC20(owner, supply, name, symbol, decimals, mintable, {\"value\": ethers.utils.parseEther(\"0.001\")});\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Token Builder</h1>\n      <h2>Build your own ERC20 token on the Ethereum blockchain!</h2>\n      {!tokenAddress && <BuildForm onSubmit={build}/>}\n      {tokenAddress && <Dashboard tokenAddress={tokenAddress}/>}\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}