{"ast":null,"code":"var _jsxFileName = \"/Users/jake/workspace/token-builder/src/App.js\";\nimport logo from './logo.svg';\nimport './App.css';\nimport BuildForm from './Components/BuildForm.jsx';\nimport { ethers } from 'ethers';\nimport CustomERC20Builder from './artifacts/src/contracts/CustomERC20Builder.sol/CustomERC20Builder.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst contractAddress = '0x5FbDB2315678afecb367f032d93F642f64180aa3';\n\nfunction App() {\n  const build = async (name, symbol, supply, decimals, mintable) => {\n    const provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\n    await provider.send(\"eth_requestAccounts\", []);\n    const signer = provider.getSigner();\n    const contract = new ethers.Contract(contractAddress, CustomERC20Builder.abi, signer);\n    contract.on('TokenDeployment', () => {\n      console.log(\"event fired!\");\n    });\n    const owner = await signer.getAddress();\n    const tx = await contract.buildERC20(owner, supply, name, symbol, decimals, mintable, {\n      \"value\": ethers.utils.parseEther(\"0.001\")\n    });\n    console.log(tx);\n    const rc = await tx.wait();\n    console.log(rc);\n    await new Promise(res => setTimeout(() => res(null), 5000));\n    const event = rc.events.find(e => e.event === \"TokenDeployment\");\n    console.log(event); //const tokenAddr = event.args.tokenAddress;\n    //console.log(tokenAddr);\n    //const token = await ethers.getContractAt(\"CustomERC20\", tokenAddr);\n\n    await new Promise(res => setTimeout(() => res(null), 5000));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Token Builder\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Build your own ERC20 token on the Ethereum blockchain!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(BuildForm, {\n      onSubmit: build\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/jake/workspace/token-builder/src/App.js"],"names":["logo","BuildForm","ethers","CustomERC20Builder","contractAddress","App","build","name","symbol","supply","decimals","mintable","provider","providers","Web3Provider","window","ethereum","send","signer","getSigner","contract","Contract","abi","on","console","log","owner","getAddress","tx","buildERC20","utils","parseEther","rc","wait","Promise","res","setTimeout","event","events","find","e"],"mappings":";AAAA,OAAOA,IAAP,MAAiB,YAAjB;AACA,OAAO,WAAP;AACA,OAAOC,SAAP,MAAsB,4BAAtB;AACA,SAASC,MAAT,QAAuB,QAAvB;AAEA,OAAOC,kBAAP,MAA+B,0EAA/B;;AACA,MAAMC,eAAe,GAAG,4CAAxB;;AAEA,SAASC,GAAT,GAAe;AACb,QAAMC,KAAK,GAAG,OAAOC,IAAP,EAAaC,MAAb,EAAqBC,MAArB,EAA6BC,QAA7B,EAAuCC,QAAvC,KAAoD;AAChE,UAAMC,QAAQ,GAAG,IAAIV,MAAM,CAACW,SAAP,CAAiBC,YAArB,CAAkCC,MAAM,CAACC,QAAzC,EAAmD,KAAnD,CAAjB;AACA,UAAMJ,QAAQ,CAACK,IAAT,CAAc,qBAAd,EAAqC,EAArC,CAAN;AACA,UAAMC,MAAM,GAAGN,QAAQ,CAACO,SAAT,EAAf;AACA,UAAMC,QAAQ,GAAG,IAAIlB,MAAM,CAACmB,QAAX,CAAoBjB,eAApB,EAAqCD,kBAAkB,CAACmB,GAAxD,EAA6DJ,MAA7D,CAAjB;AACAE,IAAAA,QAAQ,CAACG,EAAT,CAAY,iBAAZ,EAA+B,MAAM;AACnCC,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACD,KAFD;AAGA,UAAMC,KAAK,GAAG,MAAMR,MAAM,CAACS,UAAP,EAApB;AACA,UAAMC,EAAE,GAAG,MAAMR,QAAQ,CAACS,UAAT,CAAoBH,KAApB,EAA2BjB,MAA3B,EAAmCF,IAAnC,EAAyCC,MAAzC,EAAiDE,QAAjD,EAA2DC,QAA3D,EAAqE;AAAC,eAAST,MAAM,CAAC4B,KAAP,CAAaC,UAAb,CAAwB,OAAxB;AAAV,KAArE,CAAjB;AACAP,IAAAA,OAAO,CAACC,GAAR,CAAYG,EAAZ;AACA,UAAMI,EAAE,GAAG,MAAMJ,EAAE,CAACK,IAAH,EAAjB;AACAT,IAAAA,OAAO,CAACC,GAAR,CAAYO,EAAZ;AACA,UAAM,IAAIE,OAAJ,CAAYC,GAAG,IAAIC,UAAU,CAAC,MAAMD,GAAG,CAAC,IAAD,CAAV,EAAkB,IAAlB,CAA7B,CAAN;AACA,UAAME,KAAK,GAAGL,EAAE,CAACM,MAAH,CAAUC,IAAV,CAAeC,CAAC,IAAIA,CAAC,CAACH,KAAF,KAAY,iBAAhC,CAAd;AACAb,IAAAA,OAAO,CAACC,GAAR,CAAYY,KAAZ,EAfgE,CAgBhE;AACA;AACA;;AACA,UAAM,IAAIH,OAAJ,CAAYC,GAAG,IAAIC,UAAU,CAAC,MAAMD,GAAG,CAAC,IAAD,CAAV,EAAkB,IAAlB,CAA7B,CAAN;AACD,GApBD;;AAsBA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,SAAD;AAAW,MAAA,QAAQ,EAAE7B;AAArB;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;KA9BQD,G;AAgCT,eAAeA,GAAf","sourcesContent":["import logo from './logo.svg';\nimport './App.css';\nimport BuildForm from './Components/BuildForm.jsx';\nimport { ethers } from 'ethers';\n\nimport CustomERC20Builder from './artifacts/src/contracts/CustomERC20Builder.sol/CustomERC20Builder.json';\nconst contractAddress = '0x5FbDB2315678afecb367f032d93F642f64180aa3';\n\nfunction App() {\n  const build = async (name, symbol, supply, decimals, mintable) => {\n    const provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\n    await provider.send(\"eth_requestAccounts\", []);\n    const signer = provider.getSigner();\n    const contract = new ethers.Contract(contractAddress, CustomERC20Builder.abi, signer);\n    contract.on('TokenDeployment', () => {\n      console.log(\"event fired!\")\n    });\n    const owner = await signer.getAddress();\n    const tx = await contract.buildERC20(owner, supply, name, symbol, decimals, mintable, {\"value\": ethers.utils.parseEther(\"0.001\")});\n    console.log(tx);\n    const rc = await tx.wait();\n    console.log(rc);\n    await new Promise(res => setTimeout(() => res(null), 5000));\n    const event = rc.events.find(e => e.event === \"TokenDeployment\");\n    console.log(event);\n    //const tokenAddr = event.args.tokenAddress;\n    //console.log(tokenAddr);\n    //const token = await ethers.getContractAt(\"CustomERC20\", tokenAddr);\n    await new Promise(res => setTimeout(() => res(null), 5000));\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Token Builder</h1>\n      <h2>Build your own ERC20 token on the Ethereum blockchain!</h2>\n      <BuildForm onSubmit={build}/>\n    </div>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}