{"ast":null,"code":"import _asyncToGenerator from\"/Users/jake/workspace/token-builder/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"/Users/jake/workspace/token-builder/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _regeneratorRuntime from\"/Users/jake/workspace/token-builder/node_modules/@babel/runtime/regenerator/index.js\";import logo from'./logo.svg';import'bootstrap/dist/css/bootstrap.min.css';import'./App.css';import BuildForm from'./Components/BuildForm.jsx';import Dashboard from'./Components/Dashboard.jsx';import{ethers}from'ethers';import{useState}from'react';import Button from'react-bootstrap/Button';import ButtonGroup from'react-bootstrap/ButtonGroup';import Card from'react-bootstrap/Card';import CustomERC20Builder from'./artifacts/src/contracts/CustomERC20Builder.sol/CustomERC20Builder.json';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var contractAddress='0x96D998E65eBf1BFEdEEDaf59c8D63EC6E06175B9';//Rinkeby\nfunction App(){var _useState=useState(''),_useState2=_slicedToArray(_useState,2),tokenAddress=_useState2[0],setTokenAddress=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),newToken=_useState4[0],toggleNewToken=_useState4[1];var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),tokenDashboard=_useState6[0],toggleTokenDashboard=_useState6[1];var _useState7=useState(false),_useState8=_slicedToArray(_useState7,2),inProgress=_useState8[0],toggleInProgress=_useState8[1];var build=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(name,symbol,supply,decimals){var provider,signer,contract,owner,tx,rc,event,_event$args,own,addr,newTokenAddress;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(inProgress){_context.next=29;break;}_context.prev=1;toggleInProgress(true);provider=new ethers.providers.Web3Provider(window.ethereum,\"any\");_context.next=6;return provider.send(\"eth_requestAccounts\",[]);case 6:signer=provider.getSigner();contract=new ethers.Contract(contractAddress,CustomERC20Builder.abi,signer);_context.next=10;return signer.getAddress();case 10:owner=_context.sent;_context.next=13;return contract.buildERC20(owner,supply,name,symbol,decimals,{\"value\":ethers.utils.parseEther(\"0.001\")});case 13:tx=_context.sent;_context.next=16;return tx.wait();case 16:rc=_context.sent;event=rc.events.find(function(event){return event.event==='TokenDeployment';});_event$args=_slicedToArray(event.args,2),own=_event$args[0],addr=_event$args[1];newTokenAddress=addr;setTokenAddress(newTokenAddress);toggleNewToken(false);toggleTokenDashboard(true);_context.next=29;break;case 25:_context.prev=25;_context.t0=_context[\"catch\"](1);alert(_context.t0);toggleInProgress(false);case 29:case\"end\":return _context.stop();}}},_callee,null,[[1,25]]);}));return function build(_x,_x2,_x3,_x4){return _ref.apply(this,arguments);};}();return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Token Builder\"}),/*#__PURE__*/_jsx(\"h2\",{children:\"Build your own ERC20 token on the Ethereum (Rinkeby) blockchain!\"}),/*#__PURE__*/_jsxs(Card,{children:[/*#__PURE__*/_jsxs(ButtonGroup,{children:[/*#__PURE__*/_jsx(Button,{variant:!tokenDashboard?\"primary\":\"secondary\",onClick:function onClick(){toggleTokenDashboard(false);toggleNewToken(true);},children:\"Create A Token\"}),/*#__PURE__*/_jsx(Button,{variant:tokenDashboard?\"primary\":\"secondary\",onClick:function onClick(){toggleNewToken(false);toggleTokenDashboard(true);},children:\"Token Dashboard\"})]}),newToken&&/*#__PURE__*/_jsx(BuildForm,{onSubmit:build,inProgress:inProgress}),tokenDashboard&&/*#__PURE__*/_jsx(Dashboard,{tokenAddress:tokenAddress})]})]});}export default App;","map":{"version":3,"sources":["/Users/jake/workspace/token-builder/src/App.js"],"names":["logo","BuildForm","Dashboard","ethers","useState","Button","ButtonGroup","Card","CustomERC20Builder","contractAddress","App","tokenAddress","setTokenAddress","newToken","toggleNewToken","tokenDashboard","toggleTokenDashboard","inProgress","toggleInProgress","build","name","symbol","supply","decimals","provider","providers","Web3Provider","window","ethereum","send","signer","getSigner","contract","Contract","abi","getAddress","owner","buildERC20","utils","parseEther","tx","wait","rc","event","events","find","args","own","addr","newTokenAddress","alert"],"mappings":"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","sourcesContent":["import logo from './logo.svg';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport BuildForm from './Components/BuildForm.jsx';\nimport Dashboard from './Components/Dashboard.jsx';\nimport { ethers } from 'ethers';\nimport { useState } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport Card from 'react-bootstrap/Card';\n\nimport CustomERC20Builder from './artifacts/src/contracts/CustomERC20Builder.sol/CustomERC20Builder.json';\nconst contractAddress = '0x96D998E65eBf1BFEdEEDaf59c8D63EC6E06175B9'; //Rinkeby\n\nfunction App() {\n  const [tokenAddress, setTokenAddress] = useState('');\n  const [newToken, toggleNewToken] = useState(false);\n  const [tokenDashboard, toggleTokenDashboard] = useState(false);\n  const [inProgress, toggleInProgress] = useState(false);\n\n  const build = async (name, symbol, supply, decimals) => {\n    if (!inProgress) {\n      try {\n        toggleInProgress(true);\n        const provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\n        await provider.send(\"eth_requestAccounts\", []);\n        const signer = provider.getSigner();\n        const contract = new ethers.Contract(contractAddress, CustomERC20Builder.abi, signer);\n        const owner = await signer.getAddress();\n        const tx = await contract.buildERC20(owner, supply, name, symbol, decimals, {\"value\": ethers.utils.parseEther(\"0.001\")});\n        const rc = await tx.wait();\n        const event = rc.events.find(event => event.event === 'TokenDeployment');\n        const [own, addr] = event.args;\n        const newTokenAddress = addr;\n        setTokenAddress(newTokenAddress);\n        toggleNewToken(false);\n        toggleTokenDashboard(true);\n      } catch (e) {\n        alert(e);\n        toggleInProgress(false);\n      }\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Token Builder</h1>\n      <h2>Build your own ERC20 token on the Ethereum (Rinkeby) blockchain!</h2>\n      <Card>\n        <ButtonGroup>\n          <Button variant={!tokenDashboard ? \"primary\" : \"secondary\"} onClick={()=>{\n            toggleTokenDashboard(false);\n            toggleNewToken(true);\n          }}>Create A Token</Button>\n          <Button variant={tokenDashboard ? \"primary\" : \"secondary\"} onClick={()=>{\n            toggleNewToken(false);\n            toggleTokenDashboard(true);\n          }}>Token Dashboard</Button>\n        </ButtonGroup>\n        {newToken && <BuildForm onSubmit={build} inProgress={inProgress}/>}\n        {tokenDashboard && <Dashboard tokenAddress={tokenAddress}/>}\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}