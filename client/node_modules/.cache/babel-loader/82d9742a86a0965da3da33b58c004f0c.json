{"ast":null,"code":"var _jsxFileName = \"/Users/jake/workspace/token-builder/src/App.js\";\nimport logo from './logo.svg';\nimport './App.css';\nimport BuildForm from './Components/BuildForm.jsx';\nimport { ethers } from 'ethers';\nimport { useEffect } from 'react';\nimport CustomERC20Builder from './artifacts/src/contracts/CustomERC20Builder.sol/CustomERC20Builder.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst contractAddress = '0x5FbDB2315678afecb367f032d93F642f64180aa3';\n\nfunction App() {\n  const listen = async () => {\n    const provider = new ethers.providers.WebSocketProvider([\"ws://localhost:8545\"]);\n    const contract = new ethers.Contract(contractAddress, CustomERC20Builder.abi, provider);\n    console.log(provider);\n    contract.on('TokenDeployment', () => {\n      console.log(\"event fired!\");\n    });\n  };\n\n  const build = async (name, symbol, supply, decimals, mintable) => {\n    const provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\n    await provider.send(\"eth_requestAccounts\", []);\n    const signer = provider.getSigner();\n    const contract = new ethers.Contract(contractAddress, CustomERC20Builder.abi, signer);\n    const owner = await signer.getAddress();\n    await contract.buildERC20(owner, supply, name, symbol, decimals, mintable, {\n      \"value\": ethers.utils.parseEther(\"0.001\")\n    });\n    await listen();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Token Builder\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Build your own ERC20 token on the Ethereum blockchain!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(BuildForm, {\n      onSubmit: build\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/jake/workspace/token-builder/src/App.js"],"names":["logo","BuildForm","ethers","useEffect","CustomERC20Builder","contractAddress","App","listen","provider","providers","WebSocketProvider","contract","Contract","abi","console","log","on","build","name","symbol","supply","decimals","mintable","Web3Provider","window","ethereum","send","signer","getSigner","owner","getAddress","buildERC20","utils","parseEther"],"mappings":";AAAA,OAAOA,IAAP,MAAiB,YAAjB;AACA,OAAO,WAAP;AACA,OAAOC,SAAP,MAAsB,4BAAtB;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,SAASC,SAAT,QAA0B,OAA1B;AAEA,OAAOC,kBAAP,MAA+B,0EAA/B;;AACA,MAAMC,eAAe,GAAG,4CAAxB;;AAEA,SAASC,GAAT,GAAe;AACb,QAAMC,MAAM,GAAG,YAAW;AACxB,UAAMC,QAAQ,GAAG,IAAIN,MAAM,CAACO,SAAP,CAAiBC,iBAArB,CAAuC,CAAC,qBAAD,CAAvC,CAAjB;AACA,UAAMC,QAAQ,GAAG,IAAIT,MAAM,CAACU,QAAX,CAAoBP,eAApB,EAAqCD,kBAAkB,CAACS,GAAxD,EAA6DL,QAA7D,CAAjB;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAYP,QAAZ;AACAG,IAAAA,QAAQ,CAACK,EAAT,CAAY,iBAAZ,EAA+B,MAAM;AACnCF,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACD,KAFD;AAGD,GAPD;;AAQA,QAAME,KAAK,GAAG,OAAOC,IAAP,EAAaC,MAAb,EAAqBC,MAArB,EAA6BC,QAA7B,EAAuCC,QAAvC,KAAoD;AAChE,UAAMd,QAAQ,GAAG,IAAIN,MAAM,CAACO,SAAP,CAAiBc,YAArB,CAAkCC,MAAM,CAACC,QAAzC,EAAmD,KAAnD,CAAjB;AACA,UAAMjB,QAAQ,CAACkB,IAAT,CAAc,qBAAd,EAAqC,EAArC,CAAN;AACA,UAAMC,MAAM,GAAGnB,QAAQ,CAACoB,SAAT,EAAf;AACA,UAAMjB,QAAQ,GAAG,IAAIT,MAAM,CAACU,QAAX,CAAoBP,eAApB,EAAqCD,kBAAkB,CAACS,GAAxD,EAA6Dc,MAA7D,CAAjB;AACA,UAAME,KAAK,GAAG,MAAMF,MAAM,CAACG,UAAP,EAApB;AACA,UAAMnB,QAAQ,CAACoB,UAAT,CAAoBF,KAApB,EAA2BT,MAA3B,EAAmCF,IAAnC,EAAyCC,MAAzC,EAAiDE,QAAjD,EAA2DC,QAA3D,EAAqE;AAAC,eAASpB,MAAM,CAAC8B,KAAP,CAAaC,UAAb,CAAwB,OAAxB;AAAV,KAArE,CAAN;AACA,UAAM1B,MAAM,EAAZ;AACD,GARD;;AAUA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,SAAD;AAAW,MAAA,QAAQ,EAAEU;AAArB;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;KA1BQX,G;AA4BT,eAAeA,GAAf","sourcesContent":["import logo from './logo.svg';\nimport './App.css';\nimport BuildForm from './Components/BuildForm.jsx';\nimport { ethers } from 'ethers';\nimport { useEffect } from 'react';\n\nimport CustomERC20Builder from './artifacts/src/contracts/CustomERC20Builder.sol/CustomERC20Builder.json';\nconst contractAddress = '0x5FbDB2315678afecb367f032d93F642f64180aa3';\n\nfunction App() {\n  const listen = async () =>{\n    const provider = new ethers.providers.WebSocketProvider([\"ws://localhost:8545\"]);\n    const contract = new ethers.Contract(contractAddress, CustomERC20Builder.abi, provider);\n    console.log(provider)\n    contract.on('TokenDeployment', () => {\n      console.log(\"event fired!\");\n    });\n  }\n  const build = async (name, symbol, supply, decimals, mintable) => {\n    const provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\n    await provider.send(\"eth_requestAccounts\", []);\n    const signer = provider.getSigner();\n    const contract = new ethers.Contract(contractAddress, CustomERC20Builder.abi, signer);\n    const owner = await signer.getAddress();\n    await contract.buildERC20(owner, supply, name, symbol, decimals, mintable, {\"value\": ethers.utils.parseEther(\"0.001\")});\n    await listen();\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Token Builder</h1>\n      <h2>Build your own ERC20 token on the Ethereum blockchain!</h2>\n      <BuildForm onSubmit={build}/>\n    </div>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}