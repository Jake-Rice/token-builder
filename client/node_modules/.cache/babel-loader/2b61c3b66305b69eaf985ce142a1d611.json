{"ast":null,"code":"var _jsxFileName = \"/Users/jake/workspace/token-builder/src/Components/DashboardCard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport Card from 'react-bootstrap/Card';\nimport TokenEntry from './TokenEntry';\nimport Dashboard from './Dashboard';\nimport abi from './abi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst DashboardCard = props => {\n  _s();\n\n  const [tokenData, setTokenData] = useState({\n    accountAddress: '',\n    balance: '',\n    name: '',\n    symbol: '',\n    decimals: ''\n  });\n  useEffect(async () => {\n    const provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\n    await provider.send(\"eth_requestAccounts\", []);\n    const signer = provider.getSigner();\n    const erc20 = new ethers.Contract(props.tokenAddress, abi, signer);\n    const filter = erc20.filters.Transfer(await signer.getAddress());\n    erc20.on(filter, async (from, to, amount, event) => {\n      console.log(JSON.stringify(tokenData));\n      const bal = await erc20.balanceOf(await signer.getAddress());\n      setTokenData({ ...tokenData,\n        balance: bal.toString()\n      });\n      console.log(JSON.stringify(tokenData));\n    });\n    provider.provider.on(\"accountsChanged\", async () => {\n      const signer = provider.getSigner();\n      const erc20 = new ethers.Contract(props.tokenAddress, abi, signer);\n      const pUser = signer.getAddress();\n      const pName = erc20.name();\n      const pSymbol = erc20.symbol();\n      const pDecimals = erc20.decimals();\n      const [user, name, symbol, decimals] = await Promise.all([pUser, pName, pSymbol, pDecimals]);\n      const balance = await erc20.balanceOf(user);\n      setTokenData({\n        accountAddress: user,\n        balance: balance.toString(),\n        name: name,\n        symbol: symbol,\n        decimals: decimals\n      });\n      console.log(tokenData);\n    });\n    return () => {\n      erc20.removeAllListeners();\n    };\n  }, []);\n\n  const handleSubmit = async () => {\n    try {\n      const provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\n      await provider.send(\"eth_requestAccounts\", []);\n      const signer = provider.getSigner();\n      const erc20 = new ethers.Contract(props.tokenAddress, abi, signer);\n      const pUser = signer.getAddress();\n      const pName = erc20.name();\n      const pSymbol = erc20.symbol();\n      const pDecimals = erc20.decimals();\n      const [user, name, symbol, decimals] = await Promise.all([pUser, pName, pSymbol, pDecimals]);\n      const balance = await erc20.balanceOf(user);\n      setTokenData({\n        accountAddress: user,\n        balance: balance.toString(),\n        name: name,\n        symbol: symbol,\n        decimals: decimals\n      });\n      props.setTokenAddress(addr);\n    } catch (e) {\n      console.error(e);\n      alert('Error: Token address invalid.');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: props.tokenAddress === '' ? /*#__PURE__*/_jsxDEV(TokenEntry, {\n      submit: handleSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 42\n    }, this) : /*#__PURE__*/_jsxDEV(Dashboard, {\n      tokenAddress: props.tokenAddress,\n      tokenData: tokenData,\n      reset: props.reset\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 80\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 9\n  }, this);\n};\n\n_s(DashboardCard, \"7fURo3sgTaDCxfKwNzYII0Zx99Q=\");\n\n_c = DashboardCard;\nexport default DashboardCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"DashboardCard\");","map":{"version":3,"sources":["/Users/jake/workspace/token-builder/src/Components/DashboardCard.js"],"names":["React","useState","useEffect","ethers","Card","TokenEntry","Dashboard","abi","DashboardCard","props","tokenData","setTokenData","accountAddress","balance","name","symbol","decimals","provider","providers","Web3Provider","window","ethereum","send","signer","getSigner","erc20","Contract","tokenAddress","filter","filters","Transfer","getAddress","on","from","to","amount","event","console","log","JSON","stringify","bal","balanceOf","toString","pUser","pName","pSymbol","pDecimals","user","Promise","all","removeAllListeners","handleSubmit","setTokenAddress","addr","e","error","alert","reset"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { ethers } from 'ethers';\nimport Card from 'react-bootstrap/Card';\nimport TokenEntry from './TokenEntry';\nimport Dashboard from './Dashboard'\nimport abi from './abi'\n\nconst DashboardCard = (props) => {\n    const [tokenData, setTokenData] = useState({\n        accountAddress: '',\n        balance: '',\n        name: '',\n        symbol: '',\n        decimals: ''\n    });\n\n    useEffect(async () => {\n        const provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\n        await provider.send(\"eth_requestAccounts\", []);\n        const signer = provider.getSigner();\n        const erc20 = new ethers.Contract(props.tokenAddress, abi, signer);\n        const filter = erc20.filters.Transfer(await signer.getAddress());\n        erc20.on(filter, async (from, to, amount, event) => {\n            console.log(JSON.stringify(tokenData))\n            const bal = await erc20.balanceOf(await signer.getAddress());\n            setTokenData({...tokenData, balance: bal.toString()});\n            console.log(JSON.stringify(tokenData))\n        });\n        provider.provider.on(\"accountsChanged\", async () => {\n            const signer = provider.getSigner();\n            const erc20 = new ethers.Contract(props.tokenAddress, abi, signer);\n            const pUser = signer.getAddress();\n            const pName = erc20.name();\n            const pSymbol = erc20.symbol();\n            const pDecimals = erc20.decimals();\n            const [user, name, symbol, decimals] = await Promise.all([pUser, pName, pSymbol, pDecimals]);\n            const balance = await erc20.balanceOf(user);\n            setTokenData({\n                accountAddress: user,\n                balance: balance.toString(),\n                name: name,\n                symbol: symbol,\n                decimals: decimals\n            });\n            console.log(tokenData)\n        });\n        return (()=>{\n            erc20.removeAllListeners();\n        });\n    }, []);\n\n    const handleSubmit = async () => {\n        try {\n            const provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\n            await provider.send(\"eth_requestAccounts\", []);\n            const signer = provider.getSigner();\n            const erc20 = new ethers.Contract(props.tokenAddress, abi, signer);\n            const pUser = signer.getAddress();\n            const pName = erc20.name();\n            const pSymbol = erc20.symbol();\n            const pDecimals = erc20.decimals();\n            const [user, name, symbol, decimals] = await Promise.all([pUser, pName, pSymbol, pDecimals]);\n            const balance = await erc20.balanceOf(user);\n            setTokenData({\n                accountAddress: user,\n                balance: balance.toString(),\n                name: name,\n                symbol: symbol,\n                decimals: decimals\n            });\n            props.setTokenAddress(addr);\n        } catch (e) { \n            console.error(e);\n            alert('Error: Token address invalid.');\n        }\n    }\n\n    return (\n        <Card>\n            {(props.tokenAddress==='') ? <TokenEntry submit={handleSubmit}/> : <Dashboard tokenAddress={props.tokenAddress} tokenData={tokenData} reset={props.reset}/>}\n        </Card>\n    )\n}\n\nexport default DashboardCard"]},"metadata":{},"sourceType":"module"}