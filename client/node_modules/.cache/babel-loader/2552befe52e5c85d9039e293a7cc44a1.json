{"ast":null,"code":"var _jsxFileName = \"/Users/jake/workspace/token-builder/src/Components/DashboardCard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport Card from 'react-bootstrap/Card';\nimport TokenEntry from './TokenEntry';\nimport Dashboard from './Dashboard';\nimport abi from './abi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst DashboardCard = props => {\n  _s();\n\n  useEffect(() => {\n    if (props.tokenAddress !== '') {\n      handleSubmit(props.tokenAddress);\n    }\n  }, []);\n\n  const handleSubmit = async addr => {\n    try {\n      const provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\n      await provider.send(\"eth_requestAccounts\", []);\n      const signer = provider.getSigner();\n      const erc20 = new ethers.Contract(addr, abi, signer);\n      const tokenData = {\n        accountAddress: '',\n        balance: '',\n        name: '',\n        symbol: '',\n        decimals: ''\n      };\n      props.setTokenAddress(addr);\n    } catch (e) {\n      console.error(e);\n      alert('Error: Token address invalid.');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: props.tokenAddress === '' ? /*#__PURE__*/_jsxDEV(TokenEntry, {\n      submit: handleSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 42\n    }, this) : /*#__PURE__*/_jsxDEV(Dashboard, {\n      tokenAddress: props.tokenAddress,\n      reset: props.reset\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 80\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n};\n\n_s(DashboardCard, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = DashboardCard;\nexport default DashboardCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"DashboardCard\");","map":{"version":3,"sources":["/Users/jake/workspace/token-builder/src/Components/DashboardCard.js"],"names":["React","useState","useEffect","ethers","Card","TokenEntry","Dashboard","abi","DashboardCard","props","tokenAddress","handleSubmit","addr","provider","providers","Web3Provider","window","ethereum","send","signer","getSigner","erc20","Contract","tokenData","accountAddress","balance","name","symbol","decimals","setTokenAddress","e","console","error","alert","reset"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,GAAP,MAAgB,OAAhB;;;AAEA,MAAMC,aAAa,GAAIC,KAAD,IAAW;AAAA;;AAE7BP,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIO,KAAK,CAACC,YAAN,KAAqB,EAAzB,EAA6B;AACzBC,MAAAA,YAAY,CAACF,KAAK,CAACC,YAAP,CAAZ;AACH;AACJ,GAJQ,EAIN,EAJM,CAAT;;AAMA,QAAMC,YAAY,GAAG,MAAOC,IAAP,IAAgB;AACjC,QAAI;AACA,YAAMC,QAAQ,GAAG,IAAIV,MAAM,CAACW,SAAP,CAAiBC,YAArB,CAAkCC,MAAM,CAACC,QAAzC,EAAmD,KAAnD,CAAjB;AACA,YAAMJ,QAAQ,CAACK,IAAT,CAAc,qBAAd,EAAqC,EAArC,CAAN;AACA,YAAMC,MAAM,GAAGN,QAAQ,CAACO,SAAT,EAAf;AACA,YAAMC,KAAK,GAAG,IAAIlB,MAAM,CAACmB,QAAX,CAAoBV,IAApB,EAA0BL,GAA1B,EAA+BY,MAA/B,CAAd;AAEA,YAAMI,SAAS,GAAG;AACdC,QAAAA,cAAc,EAAE,EADF;AAEdC,QAAAA,OAAO,EAAE,EAFK;AAGdC,QAAAA,IAAI,EAAE,EAHQ;AAIdC,QAAAA,MAAM,EAAE,EAJM;AAKdC,QAAAA,QAAQ,EAAE;AALI,OAAlB;AAOAnB,MAAAA,KAAK,CAACoB,eAAN,CAAsBjB,IAAtB;AACH,KAdD,CAcE,OAAOkB,CAAP,EAAU;AACRC,MAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACAG,MAAAA,KAAK,CAAC,+BAAD,CAAL;AACH;AACJ,GAnBD;;AAqBA,sBACI,QAAC,IAAD;AAAA,cACMxB,KAAK,CAACC,YAAN,KAAqB,EAAtB,gBAA4B,QAAC,UAAD;AAAY,MAAA,MAAM,EAAEC;AAApB;AAAA;AAAA;AAAA;AAAA,YAA5B,gBAAkE,QAAC,SAAD;AAAW,MAAA,YAAY,EAAEF,KAAK,CAACC,YAA/B;AAA6C,MAAA,KAAK,EAAED,KAAK,CAACyB;AAA1D;AAAA;AAAA;AAAA;AAAA;AADvE;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CAlCD;;GAAM1B,a;;KAAAA,a;AAoCN,eAAeA,aAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { ethers } from 'ethers';\nimport Card from 'react-bootstrap/Card';\nimport TokenEntry from './TokenEntry';\nimport Dashboard from './Dashboard'\nimport abi from './abi'\n\nconst DashboardCard = (props) => {\n\n    useEffect(() => {\n        if (props.tokenAddress!=='') {\n            handleSubmit(props.tokenAddress);\n        }\n    }, []);\n\n    const handleSubmit = async (addr) => {\n        try {\n            const provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\n            await provider.send(\"eth_requestAccounts\", []);\n            const signer = provider.getSigner();\n            const erc20 = new ethers.Contract(addr, abi, signer);\n            \n            const tokenData = {\n                accountAddress: '',\n                balance: '',\n                name: '',\n                symbol: '',\n                decimals: ''\n            }\n            props.setTokenAddress(addr);\n        } catch (e) { \n            console.error(e);\n            alert('Error: Token address invalid.');\n        }\n    }\n\n    return (\n        <Card>\n            {(props.tokenAddress==='') ? <TokenEntry submit={handleSubmit}/> : <Dashboard tokenAddress={props.tokenAddress} reset={props.reset}/>}\n        </Card>\n    )\n}\n\nexport default DashboardCard"]},"metadata":{},"sourceType":"module"}