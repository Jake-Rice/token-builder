{"ast":null,"code":"'use strict';\n\nconst {\n  Blob\n} = require('buffer');\n\nconst {\n  kState\n} = require('./symbols');\n\nclass File extends Blob {\n  constructor(fileBits, fileName) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    // TODO: argument idl type check\n    // The File constructor is invoked with two or three parameters, depending\n    // on whether the optional dictionary parameter is used. When the File()\n    // constructor is invoked, user agents must run the following steps:\n    // 1. Let bytes be the result of processing blob parts given fileBits and\n    // options.\n    // 2. Let n be the fileName argument to the constructor.\n    const n = fileName; // 3. Process FilePropertyBag dictionary argument by running the following\n    // substeps:\n    //    1. If the type member is provided and is not the empty string, let t\n    //    be set to the type dictionary member. If t contains any characters\n    //    outside the range U+0020 to U+007E, then set t to the empty string\n    //    and return from these substeps.\n    //    TODO\n\n    const t = options.type; //    2. Convert every character in t to ASCII lowercase.\n    //    TODO\n    //    3. If the lastModified member is provided, let d be set to the\n    //    lastModified dictionary member. If it is not provided, set d to the\n    //    current date and time represented as the number of milliseconds since\n    //    the Unix Epoch (which is the equivalent of Date.now() [ECMA-262]).\n\n    const d = options.lastModified ?? Date.now(); // 4. Return a new File object F such that:\n    // F refers to the bytes byte sequence.\n    // F.size is set to the number of total bytes in bytes.\n    // F.name is set to n.\n    // F.type is set to t.\n    // F.lastModified is set to d.\n\n    super(fileBits, {\n      type: t\n    });\n    this[kState] = {\n      name: n,\n      lastModified: d\n    };\n  }\n\n  get name() {\n    if (!(this instanceof File)) {\n      throw new TypeError('Illegal invocation');\n    }\n\n    return this[kState].name;\n  }\n\n  get lastModified() {\n    if (!(this instanceof File)) {\n      throw new TypeError('Illegal invocation');\n    }\n\n    return this[kState].lastModified;\n  }\n\n  get [Symbol.toStringTag]() {\n    if (!(this instanceof File)) {\n      throw new TypeError('Illegal invocation');\n    }\n\n    return this.constructor.name;\n  }\n\n}\n\nclass FileLike {\n  constructor(blobLike, fileName) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    // TODO: argument idl type check\n    // The File constructor is invoked with two or three parameters, depending\n    // on whether the optional dictionary parameter is used. When the File()\n    // constructor is invoked, user agents must run the following steps:\n    // 1. Let bytes be the result of processing blob parts given fileBits and\n    // options.\n    // 2. Let n be the fileName argument to the constructor.\n    const n = fileName; // 3. Process FilePropertyBag dictionary argument by running the following\n    // substeps:\n    //    1. If the type member is provided and is not the empty string, let t\n    //    be set to the type dictionary member. If t contains any characters\n    //    outside the range U+0020 to U+007E, then set t to the empty string\n    //    and return from these substeps.\n    //    TODO\n\n    const t = options.type; //    2. Convert every character in t to ASCII lowercase.\n    //    TODO\n    //    3. If the lastModified member is provided, let d be set to the\n    //    lastModified dictionary member. If it is not provided, set d to the\n    //    current date and time represented as the number of milliseconds since\n    //    the Unix Epoch (which is the equivalent of Date.now() [ECMA-262]).\n\n    const d = options.lastModified ?? Date.now(); // 4. Return a new File object F such that:\n    // F refers to the bytes byte sequence.\n    // F.size is set to the number of total bytes in bytes.\n    // F.name is set to n.\n    // F.type is set to t.\n    // F.lastModified is set to d.\n\n    this[kState] = {\n      blobLike,\n      name: n,\n      type: t,\n      lastModified: d\n    };\n  }\n\n  stream() {\n    if (!(this instanceof FileLike)) {\n      throw new TypeError('Illegal invocation');\n    }\n\n    return this[kState].blobLike.stream(...arguments);\n  }\n\n  arrayBuffer() {\n    if (!(this instanceof FileLike)) {\n      throw new TypeError('Illegal invocation');\n    }\n\n    return this[kState].blobLike.arrayBuffer(...arguments);\n  }\n\n  slice() {\n    if (!(this instanceof FileLike)) {\n      throw new TypeError('Illegal invocation');\n    }\n\n    return this[kState].blobLike.slice(...arguments);\n  }\n\n  text() {\n    if (!(this instanceof FileLike)) {\n      throw new TypeError('Illegal invocation');\n    }\n\n    return this[kState].blobLike.text(...arguments);\n  }\n\n  get size() {\n    if (!(this instanceof FileLike)) {\n      throw new TypeError('Illegal invocation');\n    }\n\n    return this[kState].blobLike.size;\n  }\n\n  get type() {\n    if (!(this instanceof FileLike)) {\n      throw new TypeError('Illegal invocation');\n    }\n\n    return this[kState].blobLike.type;\n  }\n\n  get name() {\n    if (!(this instanceof FileLike)) {\n      throw new TypeError('Illegal invocation');\n    }\n\n    return this[kState].name;\n  }\n\n  get lastModified() {\n    if (!(this instanceof FileLike)) {\n      throw new TypeError('Illegal invocation');\n    }\n\n    return this[kState].lastModified;\n  }\n\n  get [Symbol.toStringTag]() {\n    if (!(this instanceof FileLike)) {\n      throw new TypeError('Illegal invocation');\n    }\n\n    return 'File';\n  }\n\n}\n\nmodule.exports = {\n  File: globalThis.File ?? File,\n  FileLike\n};","map":{"version":3,"sources":["/Users/jake/workspace/token-builder/node_modules/undici/lib/fetch/file.js"],"names":["Blob","require","kState","File","constructor","fileBits","fileName","options","n","t","type","d","lastModified","Date","now","name","TypeError","Symbol","toStringTag","FileLike","blobLike","stream","arrayBuffer","slice","text","size","module","exports","globalThis"],"mappings":"AAAA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAWC,OAAO,CAAC,QAAD,CAAxB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAaD,OAAO,CAAC,WAAD,CAA1B;;AAEA,MAAME,IAAN,SAAmBH,IAAnB,CAAwB;AACtBI,EAAAA,WAAW,CAAEC,QAAF,EAAYC,QAAZ,EAAoC;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AAC7C;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA,UAAMC,CAAC,GAAGF,QAAV,CAX6C,CAa7C;AACA;AAEA;AACA;AACA;AACA;AACA;;AACA,UAAMG,CAAC,GAAGF,OAAO,CAACG,IAAlB,CArB6C,CAuB7C;AACA;AAEA;AACA;AACA;AACA;;AACA,UAAMC,CAAC,GAAGJ,OAAO,CAACK,YAAR,IAAwBC,IAAI,CAACC,GAAL,EAAlC,CA9B6C,CAgC7C;AACA;AACA;AACA;AACA;AACA;;AAEA,UAAMT,QAAN,EAAgB;AAAEK,MAAAA,IAAI,EAAED;AAAR,KAAhB;AACA,SAAKP,MAAL,IAAe;AACba,MAAAA,IAAI,EAAEP,CADO;AAEbI,MAAAA,YAAY,EAAED;AAFD,KAAf;AAID;;AAEO,MAAJI,IAAI,GAAI;AACV,QAAI,EAAE,gBAAgBZ,IAAlB,CAAJ,EAA6B;AAC3B,YAAM,IAAIa,SAAJ,CAAc,oBAAd,CAAN;AACD;;AAED,WAAO,KAAKd,MAAL,EAAaa,IAApB;AACD;;AAEe,MAAZH,YAAY,GAAI;AAClB,QAAI,EAAE,gBAAgBT,IAAlB,CAAJ,EAA6B;AAC3B,YAAM,IAAIa,SAAJ,CAAc,oBAAd,CAAN;AACD;;AAED,WAAO,KAAKd,MAAL,EAAaU,YAApB;AACD;;AAEsB,OAAlBK,MAAM,CAACC,WAAW,IAAK;AAC1B,QAAI,EAAE,gBAAgBf,IAAlB,CAAJ,EAA6B;AAC3B,YAAM,IAAIa,SAAJ,CAAc,oBAAd,CAAN;AACD;;AAED,WAAO,KAAKZ,WAAL,CAAiBW,IAAxB;AACD;;AArEqB;;AAwExB,MAAMI,QAAN,CAAe;AACbf,EAAAA,WAAW,CAAEgB,QAAF,EAAYd,QAAZ,EAAoC;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AAC7C;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA,UAAMC,CAAC,GAAGF,QAAV,CAX6C,CAa7C;AACA;AAEA;AACA;AACA;AACA;AACA;;AACA,UAAMG,CAAC,GAAGF,OAAO,CAACG,IAAlB,CArB6C,CAuB7C;AACA;AAEA;AACA;AACA;AACA;;AACA,UAAMC,CAAC,GAAGJ,OAAO,CAACK,YAAR,IAAwBC,IAAI,CAACC,GAAL,EAAlC,CA9B6C,CAgC7C;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAKZ,MAAL,IAAe;AACbkB,MAAAA,QADa;AAEbL,MAAAA,IAAI,EAAEP,CAFO;AAGbE,MAAAA,IAAI,EAAED,CAHO;AAIbG,MAAAA,YAAY,EAAED;AAJD,KAAf;AAMD;;AAEDU,EAAAA,MAAM,GAAW;AACf,QAAI,EAAE,gBAAgBF,QAAlB,CAAJ,EAAiC;AAC/B,YAAM,IAAIH,SAAJ,CAAc,oBAAd,CAAN;AACD;;AAED,WAAO,KAAKd,MAAL,EAAakB,QAAb,CAAsBC,MAAtB,CAA6B,YAA7B,CAAP;AACD;;AAEDC,EAAAA,WAAW,GAAW;AACpB,QAAI,EAAE,gBAAgBH,QAAlB,CAAJ,EAAiC;AAC/B,YAAM,IAAIH,SAAJ,CAAc,oBAAd,CAAN;AACD;;AAED,WAAO,KAAKd,MAAL,EAAakB,QAAb,CAAsBE,WAAtB,CAAkC,YAAlC,CAAP;AACD;;AAEDC,EAAAA,KAAK,GAAW;AACd,QAAI,EAAE,gBAAgBJ,QAAlB,CAAJ,EAAiC;AAC/B,YAAM,IAAIH,SAAJ,CAAc,oBAAd,CAAN;AACD;;AAED,WAAO,KAAKd,MAAL,EAAakB,QAAb,CAAsBG,KAAtB,CAA4B,YAA5B,CAAP;AACD;;AAEDC,EAAAA,IAAI,GAAW;AACb,QAAI,EAAE,gBAAgBL,QAAlB,CAAJ,EAAiC;AAC/B,YAAM,IAAIH,SAAJ,CAAc,oBAAd,CAAN;AACD;;AAED,WAAO,KAAKd,MAAL,EAAakB,QAAb,CAAsBI,IAAtB,CAA2B,YAA3B,CAAP;AACD;;AAEO,MAAJC,IAAI,GAAI;AACV,QAAI,EAAE,gBAAgBN,QAAlB,CAAJ,EAAiC;AAC/B,YAAM,IAAIH,SAAJ,CAAc,oBAAd,CAAN;AACD;;AAED,WAAO,KAAKd,MAAL,EAAakB,QAAb,CAAsBK,IAA7B;AACD;;AAEO,MAAJf,IAAI,GAAI;AACV,QAAI,EAAE,gBAAgBS,QAAlB,CAAJ,EAAiC;AAC/B,YAAM,IAAIH,SAAJ,CAAc,oBAAd,CAAN;AACD;;AAED,WAAO,KAAKd,MAAL,EAAakB,QAAb,CAAsBV,IAA7B;AACD;;AAEO,MAAJK,IAAI,GAAI;AACV,QAAI,EAAE,gBAAgBI,QAAlB,CAAJ,EAAiC;AAC/B,YAAM,IAAIH,SAAJ,CAAc,oBAAd,CAAN;AACD;;AAED,WAAO,KAAKd,MAAL,EAAaa,IAApB;AACD;;AAEe,MAAZH,YAAY,GAAI;AAClB,QAAI,EAAE,gBAAgBO,QAAlB,CAAJ,EAAiC;AAC/B,YAAM,IAAIH,SAAJ,CAAc,oBAAd,CAAN;AACD;;AAED,WAAO,KAAKd,MAAL,EAAaU,YAApB;AACD;;AAEsB,OAAlBK,MAAM,CAACC,WAAW,IAAK;AAC1B,QAAI,EAAE,gBAAgBC,QAAlB,CAAJ,EAAiC;AAC/B,YAAM,IAAIH,SAAJ,CAAc,oBAAd,CAAN;AACD;;AAED,WAAO,MAAP;AACD;;AAtHY;;AAyHfU,MAAM,CAACC,OAAP,GAAiB;AAAExB,EAAAA,IAAI,EAAEyB,UAAU,CAACzB,IAAX,IAAmBA,IAA3B;AAAiCgB,EAAAA;AAAjC,CAAjB","sourcesContent":["'use strict'\n\nconst { Blob } = require('buffer')\nconst { kState } = require('./symbols')\n\nclass File extends Blob {\n  constructor (fileBits, fileName, options = {}) {\n    // TODO: argument idl type check\n\n    // The File constructor is invoked with two or three parameters, depending\n    // on whether the optional dictionary parameter is used. When the File()\n    // constructor is invoked, user agents must run the following steps:\n\n    // 1. Let bytes be the result of processing blob parts given fileBits and\n    // options.\n\n    // 2. Let n be the fileName argument to the constructor.\n    const n = fileName\n\n    // 3. Process FilePropertyBag dictionary argument by running the following\n    // substeps:\n\n    //    1. If the type member is provided and is not the empty string, let t\n    //    be set to the type dictionary member. If t contains any characters\n    //    outside the range U+0020 to U+007E, then set t to the empty string\n    //    and return from these substeps.\n    //    TODO\n    const t = options.type\n\n    //    2. Convert every character in t to ASCII lowercase.\n    //    TODO\n\n    //    3. If the lastModified member is provided, let d be set to the\n    //    lastModified dictionary member. If it is not provided, set d to the\n    //    current date and time represented as the number of milliseconds since\n    //    the Unix Epoch (which is the equivalent of Date.now() [ECMA-262]).\n    const d = options.lastModified ?? Date.now()\n\n    // 4. Return a new File object F such that:\n    // F refers to the bytes byte sequence.\n    // F.size is set to the number of total bytes in bytes.\n    // F.name is set to n.\n    // F.type is set to t.\n    // F.lastModified is set to d.\n\n    super(fileBits, { type: t })\n    this[kState] = {\n      name: n,\n      lastModified: d\n    }\n  }\n\n  get name () {\n    if (!(this instanceof File)) {\n      throw new TypeError('Illegal invocation')\n    }\n\n    return this[kState].name\n  }\n\n  get lastModified () {\n    if (!(this instanceof File)) {\n      throw new TypeError('Illegal invocation')\n    }\n\n    return this[kState].lastModified\n  }\n\n  get [Symbol.toStringTag] () {\n    if (!(this instanceof File)) {\n      throw new TypeError('Illegal invocation')\n    }\n\n    return this.constructor.name\n  }\n}\n\nclass FileLike {\n  constructor (blobLike, fileName, options = {}) {\n    // TODO: argument idl type check\n\n    // The File constructor is invoked with two or three parameters, depending\n    // on whether the optional dictionary parameter is used. When the File()\n    // constructor is invoked, user agents must run the following steps:\n\n    // 1. Let bytes be the result of processing blob parts given fileBits and\n    // options.\n\n    // 2. Let n be the fileName argument to the constructor.\n    const n = fileName\n\n    // 3. Process FilePropertyBag dictionary argument by running the following\n    // substeps:\n\n    //    1. If the type member is provided and is not the empty string, let t\n    //    be set to the type dictionary member. If t contains any characters\n    //    outside the range U+0020 to U+007E, then set t to the empty string\n    //    and return from these substeps.\n    //    TODO\n    const t = options.type\n\n    //    2. Convert every character in t to ASCII lowercase.\n    //    TODO\n\n    //    3. If the lastModified member is provided, let d be set to the\n    //    lastModified dictionary member. If it is not provided, set d to the\n    //    current date and time represented as the number of milliseconds since\n    //    the Unix Epoch (which is the equivalent of Date.now() [ECMA-262]).\n    const d = options.lastModified ?? Date.now()\n\n    // 4. Return a new File object F such that:\n    // F refers to the bytes byte sequence.\n    // F.size is set to the number of total bytes in bytes.\n    // F.name is set to n.\n    // F.type is set to t.\n    // F.lastModified is set to d.\n\n    this[kState] = {\n      blobLike,\n      name: n,\n      type: t,\n      lastModified: d\n    }\n  }\n\n  stream (...args) {\n    if (!(this instanceof FileLike)) {\n      throw new TypeError('Illegal invocation')\n    }\n\n    return this[kState].blobLike.stream(...args)\n  }\n\n  arrayBuffer (...args) {\n    if (!(this instanceof FileLike)) {\n      throw new TypeError('Illegal invocation')\n    }\n\n    return this[kState].blobLike.arrayBuffer(...args)\n  }\n\n  slice (...args) {\n    if (!(this instanceof FileLike)) {\n      throw new TypeError('Illegal invocation')\n    }\n\n    return this[kState].blobLike.slice(...args)\n  }\n\n  text (...args) {\n    if (!(this instanceof FileLike)) {\n      throw new TypeError('Illegal invocation')\n    }\n\n    return this[kState].blobLike.text(...args)\n  }\n\n  get size () {\n    if (!(this instanceof FileLike)) {\n      throw new TypeError('Illegal invocation')\n    }\n\n    return this[kState].blobLike.size\n  }\n\n  get type () {\n    if (!(this instanceof FileLike)) {\n      throw new TypeError('Illegal invocation')\n    }\n\n    return this[kState].blobLike.type\n  }\n\n  get name () {\n    if (!(this instanceof FileLike)) {\n      throw new TypeError('Illegal invocation')\n    }\n\n    return this[kState].name\n  }\n\n  get lastModified () {\n    if (!(this instanceof FileLike)) {\n      throw new TypeError('Illegal invocation')\n    }\n\n    return this[kState].lastModified\n  }\n\n  get [Symbol.toStringTag] () {\n    if (!(this instanceof FileLike)) {\n      throw new TypeError('Illegal invocation')\n    }\n\n    return 'File'\n  }\n}\n\nmodule.exports = { File: globalThis.File ?? File, FileLike }\n"]},"metadata":{},"sourceType":"script"}