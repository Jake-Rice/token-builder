{"ast":null,"code":"var _jsxFileName = \"/Users/jake/workspace/token-builder/src/Components/DashboardCard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport Card from 'react-bootstrap/Card';\nimport TokenEntry from './TokenEntry';\nimport Dashboard from './Dashboard';\nimport abi from './abi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst DashboardCard = props => {\n  _s();\n\n  useEffect(() => {\n    if (props.tokenAddress !== '') {\n      handleSubmit(props.tokenAddress);\n    }\n  }, []);\n\n  const handleSubmit = async addr => {\n    try {\n      await props.provider.send(\"eth_requestAccounts\", []);\n      const signer = props.provider.getSigner();\n      const erc20 = new ethers.Contract(addr, abi, signer);\n      const pUser = signer.getAddress();\n      const pName = erc20.name();\n      const pSymbol = erc20.symbol();\n      const pDecimals = erc20.decimals();\n      const [user, name, symbol, decimals] = await Promise.all([pUser, pName, pSymbol, pDecimals]);\n      const balance = await erc20.balanceOf(user);\n      props.setTokenAddress(addr);\n      props.setTokenData({\n        accountAddress: user,\n        balance: balance.toString(),\n        name: name,\n        symbol: symbol,\n        decimals: decimals\n      });\n    } catch (e) {\n      console.error(e);\n      alert('Error: Token address invalid.');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: props.tokenAddress === '' ? /*#__PURE__*/_jsxDEV(TokenEntry, {\n      submit: handleSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 42\n    }, this) : /*#__PURE__*/_jsxDEV(Dashboard, {\n      tokenAddress: props.tokenAddress,\n      tokenData: props.tokenData,\n      setTokenData: props.setTokenData,\n      reset: props.reset\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 80\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n};\n\n_s(DashboardCard, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = DashboardCard;\nexport default DashboardCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"DashboardCard\");","map":{"version":3,"sources":["/Users/jake/workspace/token-builder/src/Components/DashboardCard.js"],"names":["React","useState","useEffect","ethers","Card","TokenEntry","Dashboard","abi","DashboardCard","props","tokenAddress","handleSubmit","addr","provider","send","signer","getSigner","erc20","Contract","pUser","getAddress","pName","name","pSymbol","symbol","pDecimals","decimals","user","Promise","all","balance","balanceOf","setTokenAddress","setTokenData","accountAddress","toString","e","console","error","alert","tokenData","reset"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,GAAP,MAAgB,OAAhB;;;AAEA,MAAMC,aAAa,GAAIC,KAAD,IAAW;AAAA;;AAE7BP,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIO,KAAK,CAACC,YAAN,KAAqB,EAAzB,EAA6B;AACzBC,MAAAA,YAAY,CAACF,KAAK,CAACC,YAAP,CAAZ;AACH;AACJ,GAJQ,EAIN,EAJM,CAAT;;AAMA,QAAMC,YAAY,GAAG,MAAOC,IAAP,IAAgB;AACjC,QAAI;AACA,YAAMH,KAAK,CAACI,QAAN,CAAeC,IAAf,CAAoB,qBAApB,EAA2C,EAA3C,CAAN;AACA,YAAMC,MAAM,GAAGN,KAAK,CAACI,QAAN,CAAeG,SAAf,EAAf;AACA,YAAMC,KAAK,GAAG,IAAId,MAAM,CAACe,QAAX,CAAoBN,IAApB,EAA0BL,GAA1B,EAA+BQ,MAA/B,CAAd;AAEA,YAAMI,KAAK,GAAGJ,MAAM,CAACK,UAAP,EAAd;AACA,YAAMC,KAAK,GAAGJ,KAAK,CAACK,IAAN,EAAd;AACA,YAAMC,OAAO,GAAGN,KAAK,CAACO,MAAN,EAAhB;AACA,YAAMC,SAAS,GAAGR,KAAK,CAACS,QAAN,EAAlB;AACA,YAAM,CAACC,IAAD,EAAOL,IAAP,EAAaE,MAAb,EAAqBE,QAArB,IAAiC,MAAME,OAAO,CAACC,GAAR,CAAY,CAACV,KAAD,EAAQE,KAAR,EAAeE,OAAf,EAAwBE,SAAxB,CAAZ,CAA7C;AACA,YAAMK,OAAO,GAAG,MAAMb,KAAK,CAACc,SAAN,CAAgBJ,IAAhB,CAAtB;AACAlB,MAAAA,KAAK,CAACuB,eAAN,CAAsBpB,IAAtB;AACAH,MAAAA,KAAK,CAACwB,YAAN,CAAmB;AACfC,QAAAA,cAAc,EAAEP,IADD;AAEfG,QAAAA,OAAO,EAAEA,OAAO,CAACK,QAAR,EAFM;AAGfb,QAAAA,IAAI,EAAEA,IAHS;AAIfE,QAAAA,MAAM,EAAEA,MAJO;AAKfE,QAAAA,QAAQ,EAAEA;AALK,OAAnB;AAOH,KAnBD,CAmBE,OAAOU,CAAP,EAAU;AACRC,MAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACAG,MAAAA,KAAK,CAAC,+BAAD,CAAL;AACH;AACJ,GAxBD;;AA0BA,sBACI,QAAC,IAAD;AAAA,cACM9B,KAAK,CAACC,YAAN,KAAqB,EAAtB,gBAA4B,QAAC,UAAD;AAAY,MAAA,MAAM,EAAEC;AAApB;AAAA;AAAA;AAAA;AAAA,YAA5B,gBAAkE,QAAC,SAAD;AAAW,MAAA,YAAY,EAAEF,KAAK,CAACC,YAA/B;AAA6C,MAAA,SAAS,EAAED,KAAK,CAAC+B,SAA9D;AAAyE,MAAA,YAAY,EAAE/B,KAAK,CAACwB,YAA7F;AAA2G,MAAA,KAAK,EAAExB,KAAK,CAACgC;AAAxH;AAAA;AAAA;AAAA;AAAA;AADvE;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CAvCD;;GAAMjC,a;;KAAAA,a;AAyCN,eAAeA,aAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { ethers } from 'ethers';\nimport Card from 'react-bootstrap/Card';\nimport TokenEntry from './TokenEntry';\nimport Dashboard from './Dashboard'\nimport abi from './abi'\n\nconst DashboardCard = (props) => {\n\n    useEffect(() => {\n        if (props.tokenAddress!=='') {\n            handleSubmit(props.tokenAddress);\n        }\n    }, []);\n\n    const handleSubmit = async (addr) => {\n        try {\n            await props.provider.send(\"eth_requestAccounts\", []);\n            const signer = props.provider.getSigner();\n            const erc20 = new ethers.Contract(addr, abi, signer);\n\n            const pUser = signer.getAddress();\n            const pName = erc20.name();\n            const pSymbol = erc20.symbol();\n            const pDecimals = erc20.decimals();\n            const [user, name, symbol, decimals] = await Promise.all([pUser, pName, pSymbol, pDecimals]);\n            const balance = await erc20.balanceOf(user);\n            props.setTokenAddress(addr);\n            props.setTokenData({\n                accountAddress: user,\n                balance: balance.toString(),\n                name: name,\n                symbol: symbol,\n                decimals: decimals\n            });\n        } catch (e) { \n            console.error(e);\n            alert('Error: Token address invalid.');\n        }\n    }\n\n    return (\n        <Card>\n            {(props.tokenAddress==='') ? <TokenEntry submit={handleSubmit}/> : <Dashboard tokenAddress={props.tokenAddress} tokenData={props.tokenData} setTokenData={props.setTokenData} reset={props.reset}/>}\n        </Card>\n    )\n}\n\nexport default DashboardCard"]},"metadata":{},"sourceType":"module"}