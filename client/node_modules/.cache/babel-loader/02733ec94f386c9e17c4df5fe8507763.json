{"ast":null,"code":"var _jsxFileName = \"/Users/jake/workspace/token-builder/src/App.js\",\n    _s = $RefreshSig$();\n\nimport logo from './logo.svg'; //import './App.css';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport BuildForm from './Components/BuildForm.jsx';\nimport Dashboard from './Components/Dashboard.jsx';\nimport { ethers } from 'ethers';\nimport { useState } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport Card from 'react-bootstrap/Card';\nimport CustomERC20Builder from './artifacts/src/contracts/CustomERC20Builder.sol/CustomERC20Builder.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst contractAddress = '0x68D141E76b8CFE92A2752e0cD6BF143d48f5Ab69'; //Rinkeby\n\nfunction App() {\n  _s();\n\n  const [tokenAddress, setTokenAddress] = useState('');\n  const [newToken, toggleNewToken] = useState(false);\n  const [tokenDashboard, toggleTokenDashboard] = useState(false);\n\n  const build = async (name, symbol, supply, decimals) => {\n    const provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\n    await provider.send(\"eth_requestAccounts\", []);\n    const signer = provider.getSigner();\n    const contract = new ethers.Contract(contractAddress, CustomERC20Builder.abi, signer);\n    const owner = await signer.getAddress();\n    console.log(contract);\n    const eventFilter = contract.filters.TokenDeployment(owner, null);\n    contract.on(eventFilter, (ownerAddress, tokenAddr, event) => {\n      setTokenAddress(tokenAddr);\n    });\n    await contract.buildERC20(owner, supply, name, symbol, decimals, {\n      \"value\": ethers.utils.parseEther(\"0.001\")\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Token Builder\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Build your own ERC20 token on the Ethereum blockchain!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      children: [/*#__PURE__*/_jsxDEV(ButtonGroup, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outline\",\n          onClick: () => {\n            toggleTokenDashboard(false);\n            toggleNewToken(true);\n          },\n          children: \"Create A Token\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => {\n            toggleNewToken(false);\n            toggleTokenDashboard(true);\n          },\n          children: \"Token Dashboard\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), newToken && /*#__PURE__*/_jsxDEV(BuildForm, {\n        onSubmit: build\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 22\n      }, this), tokenDashboard && /*#__PURE__*/_jsxDEV(Dashboard, {\n        tokenAddress: tokenAddress\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 28\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"xvZxQklZHQyzvFrocBcrd/ui7Gk=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/jake/workspace/token-builder/src/App.js"],"names":["logo","BuildForm","Dashboard","ethers","useState","Button","ButtonGroup","Card","CustomERC20Builder","contractAddress","App","tokenAddress","setTokenAddress","newToken","toggleNewToken","tokenDashboard","toggleTokenDashboard","build","name","symbol","supply","decimals","provider","providers","Web3Provider","window","ethereum","send","signer","getSigner","contract","Contract","abi","owner","getAddress","console","log","eventFilter","filters","TokenDeployment","on","ownerAddress","tokenAddr","event","buildERC20","utils","parseEther"],"mappings":";;;AAAA,OAAOA,IAAP,MAAiB,YAAjB,C,CACA;;AACA,OAAO,sCAAP;AACA,OAAOC,SAAP,MAAsB,4BAAtB;AACA,OAAOC,SAAP,MAAsB,4BAAtB;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAOC,WAAP,MAAwB,6BAAxB;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AAEA,OAAOC,kBAAP,MAA+B,0EAA/B;;AACA,MAAMC,eAAe,GAAG,4CAAxB,C,CAAsE;;AAEtE,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCR,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACS,QAAD,EAAWC,cAAX,IAA6BV,QAAQ,CAAC,KAAD,CAA3C;AACA,QAAM,CAACW,cAAD,EAAiBC,oBAAjB,IAAyCZ,QAAQ,CAAC,KAAD,CAAvD;;AAEA,QAAMa,KAAK,GAAG,OAAOC,IAAP,EAAaC,MAAb,EAAqBC,MAArB,EAA6BC,QAA7B,KAA0C;AACtD,UAAMC,QAAQ,GAAG,IAAInB,MAAM,CAACoB,SAAP,CAAiBC,YAArB,CAAkCC,MAAM,CAACC,QAAzC,EAAmD,KAAnD,CAAjB;AACA,UAAMJ,QAAQ,CAACK,IAAT,CAAc,qBAAd,EAAqC,EAArC,CAAN;AACA,UAAMC,MAAM,GAAGN,QAAQ,CAACO,SAAT,EAAf;AACA,UAAMC,QAAQ,GAAG,IAAI3B,MAAM,CAAC4B,QAAX,CAAoBtB,eAApB,EAAqCD,kBAAkB,CAACwB,GAAxD,EAA6DJ,MAA7D,CAAjB;AACA,UAAMK,KAAK,GAAG,MAAML,MAAM,CAACM,UAAP,EAApB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYN,QAAZ;AACA,UAAMO,WAAW,GAAGP,QAAQ,CAACQ,OAAT,CAAiBC,eAAjB,CAAiCN,KAAjC,EAAwC,IAAxC,CAApB;AACAH,IAAAA,QAAQ,CAACU,EAAT,CAAYH,WAAZ,EAAyB,CAACI,YAAD,EAAeC,SAAf,EAA0BC,KAA1B,KAAoC;AAC3D/B,MAAAA,eAAe,CAAC8B,SAAD,CAAf;AACD,KAFD;AAGA,UAAMZ,QAAQ,CAACc,UAAT,CAAoBX,KAApB,EAA2Bb,MAA3B,EAAmCF,IAAnC,EAAyCC,MAAzC,EAAiDE,QAAjD,EAA2D;AAAC,eAASlB,MAAM,CAAC0C,KAAP,CAAaC,UAAb,CAAwB,OAAxB;AAAV,KAA3D,CAAN;AACD,GAZD;;AAcA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,IAAD;AAAA,8BACE,QAAC,WAAD;AAAA,gCACE,QAAC,MAAD;AAAQ,UAAA,OAAO,EAAC,SAAhB;AAA0B,UAAA,OAAO,EAAE,MAAI;AACrC9B,YAAAA,oBAAoB,CAAC,KAAD,CAApB;AACAF,YAAAA,cAAc,CAAC,IAAD,CAAd;AACD,WAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAKE,QAAC,MAAD;AAAQ,UAAA,OAAO,EAAE,MAAI;AACnBA,YAAAA,cAAc,CAAC,KAAD,CAAd;AACAE,YAAAA,oBAAoB,CAAC,IAAD,CAApB;AACD,WAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAWGH,QAAQ,iBAAI,QAAC,SAAD;AAAW,QAAA,QAAQ,EAAEI;AAArB;AAAA;AAAA;AAAA;AAAA,cAXf,EAYGF,cAAc,iBAAI,QAAC,SAAD;AAAW,QAAA,YAAY,EAAEJ;AAAzB;AAAA;AAAA;AAAA;AAAA,cAZrB;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAoBD;;GAvCQD,G;;KAAAA,G;AAyCT,eAAeA,GAAf","sourcesContent":["import logo from './logo.svg';\n//import './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport BuildForm from './Components/BuildForm.jsx';\nimport Dashboard from './Components/Dashboard.jsx';\nimport { ethers } from 'ethers';\nimport { useState } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport Card from 'react-bootstrap/Card';\n\nimport CustomERC20Builder from './artifacts/src/contracts/CustomERC20Builder.sol/CustomERC20Builder.json';\nconst contractAddress = '0x68D141E76b8CFE92A2752e0cD6BF143d48f5Ab69'; //Rinkeby\n\nfunction App() {\n  const [tokenAddress, setTokenAddress] = useState('');\n  const [newToken, toggleNewToken] = useState(false);\n  const [tokenDashboard, toggleTokenDashboard] = useState(false);\n\n  const build = async (name, symbol, supply, decimals) => {\n    const provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\n    await provider.send(\"eth_requestAccounts\", []);\n    const signer = provider.getSigner();\n    const contract = new ethers.Contract(contractAddress, CustomERC20Builder.abi, signer);\n    const owner = await signer.getAddress();\n    console.log(contract);\n    const eventFilter = contract.filters.TokenDeployment(owner, null);\n    contract.on(eventFilter, (ownerAddress, tokenAddr, event) => {\n      setTokenAddress(tokenAddr);\n    })\n    await contract.buildERC20(owner, supply, name, symbol, decimals, {\"value\": ethers.utils.parseEther(\"0.001\")});\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Token Builder</h1>\n      <h2>Build your own ERC20 token on the Ethereum blockchain!</h2>\n      <Card>\n        <ButtonGroup>\n          <Button variant=\"outline\" onClick={()=>{\n            toggleTokenDashboard(false);\n            toggleNewToken(true);\n          }}>Create A Token</Button>\n          <Button onClick={()=>{\n            toggleNewToken(false);\n            toggleTokenDashboard(true);\n          }}>Token Dashboard</Button>\n        </ButtonGroup>\n        {newToken && <BuildForm onSubmit={build}/>}\n        {tokenDashboard && <Dashboard tokenAddress={tokenAddress}/>}\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}