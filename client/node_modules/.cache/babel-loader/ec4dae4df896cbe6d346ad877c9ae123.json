{"ast":null,"code":"var _jsxFileName = \"/Users/jake/workspace/token-builder/src/Components/DashboardCard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport Card from 'react-bootstrap/Card';\nimport TokenEntry from './TokenEntry';\nimport Dashboard from './Dashboard';\nimport abi from './abi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst DashboardCard = props => {\n  _s();\n\n  const [tokenData, setTokenData] = useState({\n    accountAddress: '',\n    balance: '',\n    name: '',\n    symbol: '',\n    decimals: ''\n  });\n\n  const handleSubmit = async addr => {\n    try {\n      const pUser = props.web3.signer.getAddress();\n      const pName = props.web3.contract.name();\n      const pSymbol = props.web3.contract.symbol();\n      const pDecimals = props.web3.contract.decimals();\n      const [user, name, symbol, decimals] = await Promise.all([pUser, pName, pSymbol, pDecimals]);\n      const balance = await props.web3.contract.balanceOf(user);\n      props.updateContract(props.web3.contract);\n      props.setTokenData({\n        accountAddress: user,\n        balance: balance.toString(),\n        name: name,\n        symbol: symbol,\n        decimals: decimals\n      });\n      props.setTokenAddress(addr);\n    } catch (e) {\n      console.error(e);\n      alert('Error: Token address invalid.');\n    }\n  };\n\n  const updateTokenData = data => {\n    setTokenData(data);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: props.tokenAddress === '' ? /*#__PURE__*/_jsxDEV(TokenEntry, {\n      submit: handleSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 42\n    }, this) : /*#__PURE__*/_jsxDEV(Dashboard, {\n      web3: props.web3,\n      tokenAddress: props.tokenAddress,\n      tokenData: tokenData,\n      updateTokenData: updateTokenData,\n      reset: props.reset\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 80\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n};\n\n_s(DashboardCard, \"Vr1JzDQm6DHfFrHJiTA3ltKPMd0=\");\n\n_c = DashboardCard;\nexport default DashboardCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"DashboardCard\");","map":{"version":3,"sources":["/Users/jake/workspace/token-builder/src/Components/DashboardCard.js"],"names":["React","useState","useEffect","ethers","Card","TokenEntry","Dashboard","abi","DashboardCard","props","tokenData","setTokenData","accountAddress","balance","name","symbol","decimals","handleSubmit","addr","pUser","web3","signer","getAddress","pName","contract","pSymbol","pDecimals","user","Promise","all","balanceOf","updateContract","toString","setTokenAddress","e","console","error","alert","updateTokenData","data","tokenAddress","reset"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,GAAP,MAAgB,OAAhB;;;AAEA,MAAMC,aAAa,GAAIC,KAAD,IAAW;AAAA;;AAC7B,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC;AACvCW,IAAAA,cAAc,EAAE,EADuB;AAEvCC,IAAAA,OAAO,EAAE,EAF8B;AAGvCC,IAAAA,IAAI,EAAE,EAHiC;AAIvCC,IAAAA,MAAM,EAAE,EAJ+B;AAKvCC,IAAAA,QAAQ,EAAE;AAL6B,GAAD,CAA1C;;AAQA,QAAMC,YAAY,GAAG,MAAOC,IAAP,IAAgB;AACjC,QAAI;AACA,YAAMC,KAAK,GAAGV,KAAK,CAACW,IAAN,CAAWC,MAAX,CAAkBC,UAAlB,EAAd;AACA,YAAMC,KAAK,GAAGd,KAAK,CAACW,IAAN,CAAWI,QAAX,CAAoBV,IAApB,EAAd;AACA,YAAMW,OAAO,GAAGhB,KAAK,CAACW,IAAN,CAAWI,QAAX,CAAoBT,MAApB,EAAhB;AACA,YAAMW,SAAS,GAAGjB,KAAK,CAACW,IAAN,CAAWI,QAAX,CAAoBR,QAApB,EAAlB;AACA,YAAM,CAACW,IAAD,EAAOb,IAAP,EAAaC,MAAb,EAAqBC,QAArB,IAAiC,MAAMY,OAAO,CAACC,GAAR,CAAY,CAACV,KAAD,EAAQI,KAAR,EAAeE,OAAf,EAAwBC,SAAxB,CAAZ,CAA7C;AACA,YAAMb,OAAO,GAAG,MAAMJ,KAAK,CAACW,IAAN,CAAWI,QAAX,CAAoBM,SAApB,CAA8BH,IAA9B,CAAtB;AACAlB,MAAAA,KAAK,CAACsB,cAAN,CAAqBtB,KAAK,CAACW,IAAN,CAAWI,QAAhC;AACAf,MAAAA,KAAK,CAACE,YAAN,CAAmB;AACnBC,QAAAA,cAAc,EAAEe,IADG;AAEnBd,QAAAA,OAAO,EAAEA,OAAO,CAACmB,QAAR,EAFU;AAGnBlB,QAAAA,IAAI,EAAEA,IAHa;AAInBC,QAAAA,MAAM,EAAEA,MAJW;AAKnBC,QAAAA,QAAQ,EAAEA;AALS,OAAnB;AAOAP,MAAAA,KAAK,CAACwB,eAAN,CAAsBf,IAAtB;AACH,KAhBD,CAgBE,OAAOgB,CAAP,EAAU;AACRC,MAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACAG,MAAAA,KAAK,CAAC,+BAAD,CAAL;AACH;AACJ,GArBD;;AAuBA,QAAMC,eAAe,GAAIC,IAAD,IAAU;AAC9B5B,IAAAA,YAAY,CAAC4B,IAAD,CAAZ;AACH,GAFD;;AAIA,sBACI,QAAC,IAAD;AAAA,cACM9B,KAAK,CAAC+B,YAAN,KAAqB,EAAtB,gBAA4B,QAAC,UAAD;AAAY,MAAA,MAAM,EAAEvB;AAApB;AAAA;AAAA;AAAA;AAAA,YAA5B,gBAAkE,QAAC,SAAD;AAAW,MAAA,IAAI,EAAER,KAAK,CAACW,IAAvB;AAA6B,MAAA,YAAY,EAAEX,KAAK,CAAC+B,YAAjD;AAA+D,MAAA,SAAS,EAAE9B,SAA1E;AAAqF,MAAA,eAAe,EAAE4B,eAAtG;AAAuH,MAAA,KAAK,EAAE7B,KAAK,CAACgC;AAApI;AAAA;AAAA;AAAA;AAAA;AADvE;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CAzCD;;GAAMjC,a;;KAAAA,a;AA2CN,eAAeA,aAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { ethers } from 'ethers';\nimport Card from 'react-bootstrap/Card';\nimport TokenEntry from './TokenEntry';\nimport Dashboard from './Dashboard'\nimport abi from './abi'\n\nconst DashboardCard = (props) => {\n    const [tokenData, setTokenData] = useState({\n        accountAddress: '',\n        balance: '',\n        name: '',\n        symbol: '',\n        decimals: ''\n    });\n\n    const handleSubmit = async (addr) => {\n        try {\n            const pUser = props.web3.signer.getAddress();\n            const pName = props.web3.contract.name();\n            const pSymbol = props.web3.contract.symbol();\n            const pDecimals = props.web3.contract.decimals();\n            const [user, name, symbol, decimals] = await Promise.all([pUser, pName, pSymbol, pDecimals]);\n            const balance = await props.web3.contract.balanceOf(user);\n            props.updateContract(props.web3.contract);\n            props.setTokenData({\n            accountAddress: user,\n            balance: balance.toString(),\n            name: name,\n            symbol: symbol,\n            decimals: decimals\n        });\n            props.setTokenAddress(addr);\n        } catch (e) { \n            console.error(e);\n            alert('Error: Token address invalid.');\n        }\n    }\n\n    const updateTokenData = (data) => {\n        setTokenData(data);\n    }\n\n    return (\n        <Card>\n            {(props.tokenAddress==='') ? <TokenEntry submit={handleSubmit}/> : <Dashboard web3={props.web3} tokenAddress={props.tokenAddress} tokenData={tokenData} updateTokenData={updateTokenData} reset={props.reset}/>}\n        </Card>\n    )\n}\n\nexport default DashboardCard"]},"metadata":{},"sourceType":"module"}