{"ast":null,"code":"import _asyncToGenerator from\"/Users/jake/workspace/token-builder/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"/Users/jake/workspace/token-builder/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _regeneratorRuntime from\"/Users/jake/workspace/token-builder/node_modules/@babel/runtime/regenerator/index.js\";import React,{useState,useEffect}from'react';import{ethers}from'ethers';import Card from'react-bootstrap/Card';import TokenEntry from'./TokenEntry';import Dashboard from'./Dashboard';import{jsx as _jsx}from\"react/jsx-runtime\";var abi=[\"function allowance(address owner, address spender) view returns (uint256)\",\"function balanceOf(address owner) view returns (uint256)\",\"function decimals() view returns (uint8)\",\"function name() view returns (string)\",\"function symbol() view returns (string)\",\"function transfer(address to, uint amount) returns (bool)\",\"function transferFrom(address from, address to, uint256 amount) returns (bool)\",\"function approve(address spender, uint256 amount) returns (bool)\",\"event Approval(address indexed owner, address indexed spender, uint256 value)\",\"event Transfer(address indexed from, address indexed to, uint amount)\"];var DashboardCard=function DashboardCard(){var _useState=useState(''),_useState2=_slicedToArray(_useState,2),tokenAddress=_useState2[0],setTokenAddress=_useState2[1];var _useState3=useState({accountAddress:'',balance:'',name:'',symbol:'',decimals:''}),_useState4=_slicedToArray(_useState3,2),tokenData=_useState4[0],setTokenData=_useState4[1];var handleSubmit=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(addr){var provider,signer,erc20,pUser,pName,pSymbol,pDecimals,_yield$Promise$all,_yield$Promise$all2,user,name,symbol,decimals,balance;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;provider=new ethers.providers.Web3Provider(window.ethereum,\"any\");_context.next=4;return provider.send(\"eth_requestAccounts\",[]);case 4:signer=provider.getSigner();erc20=new ethers.Contract(addr,abi,signer);pUser=signer.getAddress();pName=erc20.name();pSymbol=erc20.symbol();pDecimals=erc20.decimals();_context.next=12;return Promise.all([pUser,pName,pSymbol,pDecimals]);case 12:_yield$Promise$all=_context.sent;_yield$Promise$all2=_slicedToArray(_yield$Promise$all,4);user=_yield$Promise$all2[0];name=_yield$Promise$all2[1];symbol=_yield$Promise$all2[2];decimals=_yield$Promise$all2[3];_context.next=20;return erc20.balanceOf(user);case 20:balance=_context.sent;setTokenData({accountAddress:user,balance:balance.toString(),name:name,symbol:symbol,decimals:decimals});setTokenAddress(addr);_context.next=29;break;case 25:_context.prev=25;_context.t0=_context[\"catch\"](0);console.error(_context.t0);alert('Error: Token address invalid.');case 29:case\"end\":return _context.stop();}}},_callee,null,[[0,25]]);}));return function handleSubmit(_x){return _ref.apply(this,arguments);};}();var handleReset=function handleReset(){setTokenAddress('');};return/*#__PURE__*/_jsx(Card,{children:tokenAddress===''?/*#__PURE__*/_jsx(TokenEntry,{submit:handleSubmit}):/*#__PURE__*/_jsx(Dashboard,{tokenAddress:tokenAddress,tokenData:tokenData,setTokenData:setTokenData,reset:handleReset})});};export default DashboardCard;","map":{"version":3,"sources":["/Users/jake/workspace/token-builder/src/Components/DashboardCard.js"],"names":["React","useState","useEffect","ethers","Card","TokenEntry","Dashboard","abi","DashboardCard","tokenAddress","setTokenAddress","accountAddress","balance","name","symbol","decimals","tokenData","setTokenData","handleSubmit","addr","provider","providers","Web3Provider","window","ethereum","send","signer","getSigner","erc20","Contract","pUser","getAddress","pName","pSymbol","pDecimals","Promise","all","user","balanceOf","toString","console","error","alert","handleReset"],"mappings":"8WAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CACA,OAASC,MAAT,KAAuB,QAAvB,CACA,MAAOC,CAAAA,IAAP,KAAiB,sBAAjB,CACA,MAAOC,CAAAA,UAAP,KAAuB,cAAvB,CACA,MAAOC,CAAAA,SAAP,KAAsB,aAAtB,C,2CAEA,GAAMC,CAAAA,GAAG,CAAG,CACR,2EADQ,CAER,0DAFQ,CAGR,0CAHQ,CAIR,uCAJQ,CAKR,yCALQ,CAMR,2DANQ,CAOR,gFAPQ,CAQR,kEARQ,CASR,+EATQ,CAUR,uEAVQ,CAAZ,CAaA,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,EAAM,CACxB,cAAwCP,QAAQ,CAAC,EAAD,CAAhD,wCAAOQ,YAAP,eAAqBC,eAArB,eACA,eAAkCT,QAAQ,CAAC,CACvCU,cAAc,CAAE,EADuB,CAEvCC,OAAO,CAAE,EAF8B,CAGvCC,IAAI,CAAE,EAHiC,CAIvCC,MAAM,CAAE,EAJ+B,CAKvCC,QAAQ,CAAE,EAL6B,CAAD,CAA1C,yCAAOC,SAAP,eAAkBC,YAAlB,eAQA,GAAMC,CAAAA,YAAY,0FAAG,iBAAOC,IAAP,mQAEPC,QAFO,CAEI,GAAIjB,CAAAA,MAAM,CAACkB,SAAP,CAAiBC,YAArB,CAAkCC,MAAM,CAACC,QAAzC,CAAmD,KAAnD,CAFJ,uBAGPJ,CAAAA,QAAQ,CAACK,IAAT,CAAc,qBAAd,CAAqC,EAArC,CAHO,QAIPC,MAJO,CAIEN,QAAQ,CAACO,SAAT,EAJF,CAKPC,KALO,CAKC,GAAIzB,CAAAA,MAAM,CAAC0B,QAAX,CAAoBV,IAApB,CAA0BZ,GAA1B,CAA+BmB,MAA/B,CALD,CAOPI,KAPO,CAOCJ,MAAM,CAACK,UAAP,EAPD,CAQPC,KARO,CAQCJ,KAAK,CAACf,IAAN,EARD,CASPoB,OATO,CASGL,KAAK,CAACd,MAAN,EATH,CAUPoB,SAVO,CAUKN,KAAK,CAACb,QAAN,EAVL,wBAWgCoB,CAAAA,OAAO,CAACC,GAAR,CAAY,CAACN,KAAD,CAAQE,KAAR,CAAeC,OAAf,CAAwBC,SAAxB,CAAZ,CAXhC,mGAWNG,IAXM,wBAWAxB,IAXA,wBAWMC,MAXN,wBAWcC,QAXd,+CAYSa,CAAAA,KAAK,CAACU,SAAN,CAAgBD,IAAhB,CAZT,SAYPzB,OAZO,eAcbK,YAAY,CAAC,CACTN,cAAc,CAAE0B,IADP,CAETzB,OAAO,CAAEA,OAAO,CAAC2B,QAAR,EAFA,CAGT1B,IAAI,CAAEA,IAHG,CAITC,MAAM,CAAEA,MAJC,CAKTC,QAAQ,CAAEA,QALD,CAAD,CAAZ,CAOAL,eAAe,CAACS,IAAD,CAAf,CArBa,iFAuBbqB,OAAO,CAACC,KAAR,cACAC,KAAK,CAAC,+BAAD,CAAL,CAxBa,qEAAH,kBAAZxB,CAAAA,YAAY,4CAAlB,CA4BA,GAAMyB,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,EAAM,CACtBjC,eAAe,CAAC,EAAD,CAAf,CACH,CAFD,CAIA,mBACI,KAAC,IAAD,WACMD,YAAY,GAAG,EAAhB,cAAsB,KAAC,UAAD,EAAY,MAAM,CAAES,YAApB,EAAtB,cAA4D,KAAC,SAAD,EAAW,YAAY,CAAET,YAAzB,CAAuC,SAAS,CAAEO,SAAlD,CAA6D,YAAY,CAAEC,YAA3E,CAAyF,KAAK,CAAE0B,WAAhG,EADjE,EADJ,CAKH,CA/CD,CAiDA,cAAenC,CAAAA,aAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { ethers } from 'ethers';\nimport Card from 'react-bootstrap/Card';\nimport TokenEntry from './TokenEntry';\nimport Dashboard from './Dashboard'\n\nconst abi = [\n    \"function allowance(address owner, address spender) view returns (uint256)\",\n    \"function balanceOf(address owner) view returns (uint256)\",\n    \"function decimals() view returns (uint8)\",\n    \"function name() view returns (string)\",\n    \"function symbol() view returns (string)\",\n    \"function transfer(address to, uint amount) returns (bool)\",\n    \"function transferFrom(address from, address to, uint256 amount) returns (bool)\",\n    \"function approve(address spender, uint256 amount) returns (bool)\",\n    \"event Approval(address indexed owner, address indexed spender, uint256 value)\",\n    \"event Transfer(address indexed from, address indexed to, uint amount)\"\n];\n\nconst DashboardCard = () => {\n    const [tokenAddress, setTokenAddress] = useState('');\n    const [tokenData, setTokenData] = useState({\n        accountAddress: '',\n        balance: '',\n        name: '',\n        symbol: '',\n        decimals: ''\n    });\n\n    const handleSubmit = async (addr) => {\n        try {\n            const provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\n            await provider.send(\"eth_requestAccounts\", []);\n            const signer = provider.getSigner();\n            const erc20 = new ethers.Contract(addr, abi, signer);\n\n            const pUser = signer.getAddress();\n            const pName = erc20.name();\n            const pSymbol = erc20.symbol();\n            const pDecimals = erc20.decimals();\n            const [user, name, symbol, decimals] = await Promise.all([pUser, pName, pSymbol, pDecimals]);\n            const balance = await erc20.balanceOf(user);\n            \n            setTokenData({\n                accountAddress: user,\n                balance: balance.toString(),\n                name: name,\n                symbol: symbol,\n                decimals: decimals\n            });\n            setTokenAddress(addr);\n        } catch (e) { \n            console.error(e);\n            alert('Error: Token address invalid.');\n        }\n    }\n\n    const handleReset = () => {\n        setTokenAddress('');\n    }\n\n    return (\n        <Card>\n            {(tokenAddress==='') ? <TokenEntry submit={handleSubmit}/> : <Dashboard tokenAddress={tokenAddress} tokenData={tokenData} setTokenData={setTokenData} reset={handleReset}/>}\n        </Card>\n    )\n}\n\nexport default DashboardCard"]},"metadata":{},"sourceType":"module"}