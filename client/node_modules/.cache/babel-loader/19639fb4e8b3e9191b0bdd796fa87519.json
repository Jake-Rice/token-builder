{"ast":null,"code":"var _jsxFileName = \"/Users/jake/workspace/token-builder/src/Components/Dashboard.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './dashboard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Dashboard = props => {\n  _s();\n\n  const [tokenAddress, setTokenAddress] = useState('');\n  const [tokenAddressVerified, toggleTokenAddressVerified] = useState(false);\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-row\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Token Address\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 39\n      }, this), tokenAddressVerified ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"tokenAddress\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 17\n      }, this) : /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: tokenAddress,\n        onChange: event => setTokenAddress(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-row btn-row\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"button\",\n        value: \"Get Token\",\n        className: \"btn\",\n        onClick: () => toggleTokenAddressVerified(true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 47\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Dashboard, \"DHf7xRS+frpLDIGCD0z9W6+srJk=\");\n\n_c = Dashboard;\nexport default Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["/Users/jake/workspace/token-builder/src/Components/Dashboard.jsx"],"names":["React","useState","Dashboard","props","tokenAddress","setTokenAddress","tokenAddressVerified","toggleTokenAddressVerified","event","target","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,iBAAP;;;AAEA,MAAMC,SAAS,GAAIC,KAAD,IAAW;AAAA;;AACzB,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCJ,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACK,oBAAD,EAAuBC,0BAAvB,IAAqDN,QAAQ,CAAC,KAAD,CAAnE;AAEA,sBACI;AAAA,4BACI;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA,8BAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAA1B,EACKK,oBAAoB,gBACrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADqB,gBAErB;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,KAAK,EAAEF,YAA1B;AAAwC,QAAA,QAAQ,EAAGI,KAAD,IAASH,eAAe,CAACG,KAAK,CAACC,MAAN,CAAaC,KAAd;AAA1E;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAMI;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA,6BAAkC;AAAO,QAAA,IAAI,EAAC,QAAZ;AAAqB,QAAA,KAAK,EAAC,WAA3B;AAAuC,QAAA,SAAS,EAAC,KAAjD;AAAuD,QAAA,OAAO,EAAE,MAAIH,0BAA0B,CAAC,IAAD;AAA9F;AAAA;AAAA;AAAA;AAAA;AAAlC;AAAA;AAAA;AAAA;AAAA,YANJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAUH,CAdD;;GAAML,S;;KAAAA,S;AAeN,eAAeA,SAAf","sourcesContent":["import React, { useState } from 'react';\nimport './dashboard.css';\n\nconst Dashboard = (props) => {\n    const [tokenAddress, setTokenAddress] = useState('');\n    const [tokenAddressVerified, toggleTokenAddressVerified] = useState(false);\n\n    return (\n        <form>\n            <div className=\"form-row\"><label>Token Address</label>\n                {tokenAddressVerified ?\n                <p>tokenAddress</p> :\n                <input type=\"text\" value={tokenAddress} onChange={(event)=>setTokenAddress(event.target.value)}/>}\n            </div>\n            <div className=\"form-row btn-row\"><input type=\"button\" value=\"Get Token\" className=\"btn\" onClick={()=>toggleTokenAddressVerified(true)}/></div>\n        </form>\n    );\n}\nexport default Dashboard;"]},"metadata":{},"sourceType":"module"}