{"ast":null,"code":"var _jsxFileName = \"/Users/jake/workspace/token-builder/src/Components/DashboardCard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Card from 'react-bootstrap/Card';\nimport TokenEntry from './TokenEntry';\nimport Dashboard from './Dashboard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst DashboardCard = () => {\n  _s();\n\n  const [tokenAddress, setTokenAddress] = useState('');\n\n  const handleSubmit = async addr => {\n    try {\n      const provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\n      await provider.send(\"eth_requestAccounts\", []);\n      const signer = provider.getSigner();\n      const erc20 = new ethers.Contract(addr, abi, signer);\n      setTokenAddress(addr);\n    } catch (e) {\n      console.error(e);\n      alert('Error: Token address invalid.');\n    }\n  };\n\n  const handleReset = () => {\n    setTokenAddress('');\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: tokenAddress === '' ? /*#__PURE__*/_jsxDEV(TokenEntry, {\n      onSubmit: handleSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 36\n    }, this) : /*#__PURE__*/_jsxDEV(Dashboard, {\n      tokenAddress: tokenAddress,\n      reset: handleReset\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 76\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n};\n\n_s(DashboardCard, \"t6suzVxPUkDVgecpA2Lv54nf8Oc=\");\n\n_c = DashboardCard;\nexport default DashboardCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"DashboardCard\");","map":{"version":3,"sources":["/Users/jake/workspace/token-builder/src/Components/DashboardCard.js"],"names":["React","useState","Card","TokenEntry","Dashboard","DashboardCard","tokenAddress","setTokenAddress","handleSubmit","addr","provider","ethers","providers","Web3Provider","window","ethereum","send","signer","getSigner","erc20","Contract","abi","e","console","error","alert","handleReset"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,SAAP,MAAsB,aAAtB;;;AAEA,MAAMC,aAAa,GAAG,MAAM;AAAA;;AACxB,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCN,QAAQ,CAAC,EAAD,CAAhD;;AAEA,QAAMO,YAAY,GAAG,MAAOC,IAAP,IAAgB;AACjC,QAAI;AACA,YAAMC,QAAQ,GAAG,IAAIC,MAAM,CAACC,SAAP,CAAiBC,YAArB,CAAkCC,MAAM,CAACC,QAAzC,EAAmD,KAAnD,CAAjB;AACA,YAAML,QAAQ,CAACM,IAAT,CAAc,qBAAd,EAAqC,EAArC,CAAN;AACA,YAAMC,MAAM,GAAGP,QAAQ,CAACQ,SAAT,EAAf;AACA,YAAMC,KAAK,GAAG,IAAIR,MAAM,CAACS,QAAX,CAAoBX,IAApB,EAA0BY,GAA1B,EAA+BJ,MAA/B,CAAd;AACAV,MAAAA,eAAe,CAACE,IAAD,CAAf;AACH,KAND,CAME,OAAOa,CAAP,EAAU;AACRC,MAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACAG,MAAAA,KAAK,CAAC,+BAAD,CAAL;AACH;AACJ,GAXD;;AAaA,QAAMC,WAAW,GAAG,MAAM;AACtBnB,IAAAA,eAAe,CAAC,EAAD,CAAf;AACH,GAFD;;AAIA,sBACI,QAAC,IAAD;AAAA,cACMD,YAAY,KAAG,EAAhB,gBAAsB,QAAC,UAAD;AAAY,MAAA,QAAQ,EAAEE;AAAtB;AAAA;AAAA;AAAA;AAAA,YAAtB,gBAA8D,QAAC,SAAD;AAAW,MAAA,YAAY,EAAEF,YAAzB;AAAuC,MAAA,KAAK,EAAEoB;AAA9C;AAAA;AAAA;AAAA;AAAA;AADnE;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CAzBD;;GAAMrB,a;;KAAAA,a;AA2BN,eAAeA,aAAf","sourcesContent":["import React, { useState } from 'react'\nimport Card from 'react-bootstrap/Card';\nimport TokenEntry from './TokenEntry';\nimport Dashboard from './Dashboard'\n\nconst DashboardCard = () => {\n    const [tokenAddress, setTokenAddress] = useState('');\n\n    const handleSubmit = async (addr) => {\n        try {\n            const provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\n            await provider.send(\"eth_requestAccounts\", []);\n            const signer = provider.getSigner();\n            const erc20 = new ethers.Contract(addr, abi, signer);\n            setTokenAddress(addr);\n        } catch (e) { \n            console.error(e);\n            alert('Error: Token address invalid.');\n        }\n    }\n\n    const handleReset = () => {\n        setTokenAddress('');\n    }\n\n    return (\n        <Card>\n            {(tokenAddress==='') ? <TokenEntry onSubmit={handleSubmit}/> : <Dashboard tokenAddress={tokenAddress} reset={handleReset}/>}\n        </Card>\n    )\n}\n\nexport default DashboardCard"]},"metadata":{},"sourceType":"module"}