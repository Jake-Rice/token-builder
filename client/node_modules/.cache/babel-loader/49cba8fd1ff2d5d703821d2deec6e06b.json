{"ast":null,"code":"var _jsxFileName = \"/Users/jake/workspace/token-builder/src/Components/DashboardCard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport Card from 'react-bootstrap/Card';\nimport TokenEntry from './TokenEntry';\nimport Dashboard from './Dashboard';\nimport abi from './abi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\n\nconst DashboardCard = props => {\n  _s();\n\n  const [tokenData, setTokenData] = useState({\n    accountAddress: '',\n    balance: '',\n    name: '',\n    symbol: '',\n    decimals: ''\n  });\n  useEffect(async () => {\n    const addr = await props.web3.signer.getAddress();\n    const erc20 = new ethers.Contract(props.tokenAddress, abi, props.web3.signer);\n    const filter = erc20.filters.Transfer(addr);\n    erc20.on(filter, async (from, to, amount, event) => {\n      const bal = await erc20.balanceOf(addr);\n      setTokenData({ ...tokenData,\n        balance: bal.toString()\n      });\n    });\n    return () => {\n      erc20.removeAllListeners();\n    };\n  }, []);\n\n  const handleSubmit = async addr => {\n    try {\n      const erc20 = new ethers.Contract(addr, abi, props.web3.signer);\n      console.log(JSON.stringify(erc20));\n      const pUser = props.web3.signer.getAddress();\n      const pName = erc20.name();\n      const pSymbol = erc20.symbol();\n      const pDecimals = erc20.decimals();\n      const [user, name, symbol, decimals] = await Promise.all([pUser, pName, pSymbol, pDecimals]);\n      const balance = await erc20.balanceOf(user);\n      setTokenData({\n        accountAddress: user,\n        balance: balance.toString(),\n        name: name,\n        symbol: symbol,\n        decimals: decimals\n      });\n      props.setTokenAddress(addr);\n    } catch (e) {\n      console.error(e);\n      alert('Error: Token address invalid.');\n    }\n  };\n\n  const updateTokenData = data => {\n    setTokenData(data);\n    console.log(data);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: props.tokenAddress === '' ? /*#__PURE__*/_jsxDEV(TokenEntry, {\n      submit: handleSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 42\n    }, this) : /*#__PURE__*/_jsxDEV(Dashboard, {\n      tokenAddress: props.tokenAddress,\n      tokenData: tokenData,\n      updateTokenData: updateTokenData,\n      reset: props.reset\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 80\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n};\n\n_s(DashboardCard, \"7fURo3sgTaDCxfKwNzYII0Zx99Q=\");\n\n_c = DashboardCard;\nexport default DashboardCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"DashboardCard\");","map":{"version":3,"sources":["/Users/jake/workspace/token-builder/src/Components/DashboardCard.js"],"names":["React","useState","useEffect","ethers","Card","TokenEntry","Dashboard","abi","provider","providers","Web3Provider","window","ethereum","DashboardCard","props","tokenData","setTokenData","accountAddress","balance","name","symbol","decimals","addr","web3","signer","getAddress","erc20","Contract","tokenAddress","filter","filters","Transfer","on","from","to","amount","event","bal","balanceOf","toString","removeAllListeners","handleSubmit","console","log","JSON","stringify","pUser","pName","pSymbol","pDecimals","user","Promise","all","setTokenAddress","e","error","alert","updateTokenData","data","reset"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { ethers } from 'ethers';\nimport Card from 'react-bootstrap/Card';\nimport TokenEntry from './TokenEntry';\nimport Dashboard from './Dashboard'\nimport abi from './abi'\n\nconst provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\n\nconst DashboardCard = (props) => {\n    const [tokenData, setTokenData] = useState({\n        accountAddress: '',\n        balance: '',\n        name: '',\n        symbol: '',\n        decimals: ''\n    });\n\n    useEffect(async () => {\n        const addr = await props.web3.signer.getAddress();\n        const erc20 = new ethers.Contract(props.tokenAddress, abi, props.web3.signer);\n        const filter = erc20.filters.Transfer(addr);\n        erc20.on(filter, async (from, to, amount, event) => {\n            const bal = await erc20.balanceOf(addr);\n            setTokenData({...tokenData, balance: bal.toString()});\n        });\n        return (()=>{\n            erc20.removeAllListeners();\n        });\n    }, []);\n\n    const handleSubmit = async (addr) => {\n        try {\n            const erc20 = new ethers.Contract(addr, abi, props.web3.signer);\n            console.log(JSON.stringify(erc20));\n            const pUser = props.web3.signer.getAddress();\n            const pName = erc20.name();\n            const pSymbol = erc20.symbol();\n            const pDecimals = erc20.decimals();\n            const [user, name, symbol, decimals] = await Promise.all([pUser, pName, pSymbol, pDecimals]);\n            const balance = await erc20.balanceOf(user);\n            setTokenData({\n                accountAddress: user,\n                balance: balance.toString(),\n                name: name,\n                symbol: symbol,\n                decimals: decimals\n            });\n            props.setTokenAddress(addr);\n        } catch (e) { \n            console.error(e);\n            alert('Error: Token address invalid.');\n        }\n    }\n\n    const updateTokenData = (data) => {\n        setTokenData(data);\n        console.log(data)\n    }\n\n    return (\n        <Card>\n            {(props.tokenAddress==='') ? <TokenEntry submit={handleSubmit}/> : <Dashboard tokenAddress={props.tokenAddress} tokenData={tokenData} updateTokenData={updateTokenData} reset={props.reset}/>}\n        </Card>\n    )\n}\n\nexport default DashboardCard"]},"metadata":{},"sourceType":"module"}